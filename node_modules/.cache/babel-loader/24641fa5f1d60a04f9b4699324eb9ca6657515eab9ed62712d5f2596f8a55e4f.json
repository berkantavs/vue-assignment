{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport AppointmentsListItem from \"./AppointmentsListItem.vue\";\nimport DatePick from 'vue-date-pick';\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick,\n    AppointmentsListItem\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      selectedStatus: null,\n      statuses: [{\n        value: null,\n        text: 'All Statutes'\n      }, {\n        value: 'cancelled',\n        text: 'Cancelled'\n      }, {\n        value: 'upcoming',\n        text: 'Upcoming'\n      }, {\n        value: 'completed',\n        text: 'Completed'\n      }],\n      filterStartDate: '',\n      filterEndDate: '',\n      currentPage: 1,\n      itemsPerPage: 10\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedRecords() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n  async created() {\n    await this.fetchAppointments();\n    await this.fetchAgents();\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        await this.enrichAppointmentsWithAgents();\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n      } catch (error) {\n        console.error('Error fetching agents:', error);\n      }\n    },\n    async enrichAppointmentsWithAgents() {\n      // Map agents to appointments based on agent IDs\n      this.records.forEach(record => {\n        const agentIds = record.fields.agent_id;\n        if (agentIds && Array.isArray(agentIds)) {\n          record.agents = agentIds.map(agentId => {\n            return this.agents.find(agent => agent.id === agentId);\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["fetchRecords","fetchAgents","AgentAvatar","AppointmentsListItem","DatePick","components","data","records","agents","selectedStatus","statuses","value","text","filterStartDate","filterEndDate","currentPage","itemsPerPage","computed","totalPages","Math","ceil","length","paginatedRecords","start","end","slice","created","fetchAppointments","methods","setSelectedAgent","agent","selectedAgents","includes","push","setDeselectedAgent","index","indexOf","splice","tableName","enrichAppointmentsWithAgents","error","console","forEach","record","agentIds","fields","agent_id","Array","isArray","map","agentId","find","id"],"sources":["src/components/AppointmentsList.vue"],"sourcesContent":["<template>\n  <div class=\"mt-5 mb-5\">\n    <b-container>\n      <div class=\"appointments-list\">\n        <!-- Filter and search area -->\n        <div class=\"filter-area mb-3 mt-2\">\n          <b-row>\n            <!-- Agents avatar display -->\n            <b-col lg=\"2\">\n              <div class=\"avatar-container\">\n                <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                  <AgentAvatar :agent=\"agent\" @selectedAgent=\"setSelectedAgent\" @deselectedAgent=\"setDeselectedAgent\" />\n                </div>\n                <div v-if=\"agents.length > 5\" class=\"avatar-wrapper\">\n                  <b-avatar class=\"agent-avatar-item\" style=\"background-color: #ccc;\">\n                    +{{ agents.length - 5 }}\n                  </b-avatar>\n                </div>\n              </div>\n            </b-col>\n            <!-- Status and date filters -->\n            <b-col lg=\"6\">\n              <b-row>\n                <b-col>\n                  <div class=\"status-select-box-area\">\n                    <b-form-select v-model=\"selectedStatus\" :options=\"statuses\"></b-form-select>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area\">\n                    <date-pick v-model=\"filterStartDate\" :pickTime=\"true\" :format=\"'DD-MM-YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area\">\n                    <date-pick v-model=\"filterEndDate\" :pickTime=\"true\" :format=\"'DD-MM-YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n              </b-row>\n            </b-col>\n            <!-- Search input -->\n            <b-col lg=\"4\">\n              <div class=\"d-flex justify-content-end search-input-area\">\n                <b-input-group class=\"w-75\">\n                  <b-form-input type=\"text\" class=\"text-center\" placeholder=\"Search\"></b-form-input>\n                  <b-input-group-append>\n                    <b-button variant=\"dark\">\n                      <b-icon icon=\"search\" font-scale=\"0.9\"></b-icon>\n                    </b-button>\n                  </b-input-group-append>\n                </b-input-group>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        <!-- Create appointment button -->\n        <div class=\"create-area pb-3\">\n          <b-row>\n            <b-col md=\"4\">\n              <b style=\"vertical-align: -webkit-baseline-middle\">{{ records.length }} Appointments found.</b>\n            </b-col>\n            <b-col md=\"4\" offset-md=\"4\">\n              <div class=\"create-btn-area text-end\">\n                <b-button variant=\"primary\">\n                  <b-icon icon=\"plus-circle\" font-scale=\"1.1\" class=\"mx-1\"></b-icon> Create Appointment\n                </b-button>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        <!-- List of appointments -->\n        <div class=\"list-area mt-3 mb-3\" v-if=\"paginatedRecords && paginatedRecords.length > 0\">\n          <template v-for=\"(record, index) in paginatedRecords\" :key=\"index\">\n            <AppointmentsListItem :record=\"record\" />\n          </template>\n        </div>\n        <!-- No data message -->\n        <div class=\"text-center\" v-else>\n          No data found.\n        </div>\n        <!-- Pagination -->\n        <b-pagination v-if=\"totalPages > 1\" v-model=\"currentPage\" :total-rows=\"records.length\" :per-page=\"itemsPerPage\"\n          aria-controls=\"appointments-list\" class=\"mt-3\"></b-pagination>\n      </div>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport AppointmentsListItem from \"./AppointmentsListItem.vue\";\nimport DatePick from 'vue-date-pick';\n\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick,\n    AppointmentsListItem\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      selectedStatus: null,\n      statuses: [\n        { value: null, text: 'All Statutes' },\n        { value: 'cancelled', text: 'Cancelled' },\n        { value: 'upcoming', text: 'Upcoming' },\n        { value: 'completed', text: 'Completed' },\n      ],\n      filterStartDate: '',\n      filterEndDate: '',\n      currentPage: 1,\n      itemsPerPage: 10\n    };\n  },\n\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedRecords() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n\n  async created() {\n    await this.fetchAppointments();\n    await this.fetchAgents();\n  },\n\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        await this.enrichAppointmentsWithAgents();\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n      } catch (error) {\n        console.error('Error fetching agents:', error);\n      }\n    },\n    async enrichAppointmentsWithAgents() {\n      // Map agents to appointments based on agent IDs\n      this.records.forEach(record => {\n        const agentIds = record.fields.agent_id;\n        if (agentIds && Array.isArray(agentIds)) {\n          record.agents = agentIds.map(agentId => {\n            return this.agents.find(agent => agent.id === agentId);\n          });\n        }\n      });\n    }\n  }\n};\n</script>\n"],"mappings":";AAyFA,SAAAA,YAAA;AACA,SAAAC,WAAA;AACA,OAAAC,WAAA;AACA,OAAAC,oBAAA;AACA,OAAAC,QAAA;AAEA;EACAC,UAAA;IACAH,WAAA;IACAE,QAAA;IACAD;EACA;EACAG,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;MACAC,cAAA;MACAC,QAAA,GACA;QAAAC,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,EACA;MACAC,eAAA;MACAC,aAAA;MACAC,WAAA;MACAC,YAAA;IACA;EACA;EAEAC,QAAA;IACAC,WAAA;MACA,OAAAC,IAAA,CAAAC,IAAA,MAAAb,OAAA,CAAAc,MAAA,QAAAL,YAAA;IACA;IACAM,iBAAA;MACA,MAAAC,KAAA,SAAAR,WAAA,aAAAC,YAAA;MACA,MAAAQ,GAAA,GAAAD,KAAA,QAAAP,YAAA;MACA,YAAAT,OAAA,CAAAkB,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;EACA;EAEA,MAAAE,QAAA;IACA,WAAAC,iBAAA;IACA,WAAA1B,WAAA;EACA;EAEA2B,OAAA;IACAC,iBAAAC,KAAA;MACA,UAAAC,cAAA,CAAAC,QAAA,CAAAF,KAAA;QACA,KAAAC,cAAA,CAAAE,IAAA,CAAAH,KAAA;MACA;IACA;IACAI,mBAAAJ,KAAA;MACA,MAAAK,KAAA,QAAAJ,cAAA,CAAAK,OAAA,CAAAN,KAAA;MACA,IAAAK,KAAA;QACA,KAAAJ,cAAA,CAAAM,MAAA,CAAAF,KAAA;MACA;IACA;IACA,MAAAR,kBAAA;MACA,MAAAW,SAAA;MACA;QACA,KAAA/B,OAAA,SAAAP,YAAA,CAAAsC,SAAA;QACA,WAAAC,4BAAA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,iCAAAA,KAAA;MACA;IACA;IACA,MAAAvC,YAAA;MACA,MAAAqC,SAAA;MACA;QACA,KAAA9B,MAAA,SAAAP,WAAA,CAAAqC,SAAA;MACA,SAAAE,KAAA;QACAC,OAAA,CAAAD,KAAA,2BAAAA,KAAA;MACA;IACA;IACA,MAAAD,6BAAA;MACA;MACA,KAAAhC,OAAA,CAAAmC,OAAA,CAAAC,MAAA;QACA,MAAAC,QAAA,GAAAD,MAAA,CAAAE,MAAA,CAAAC,QAAA;QACA,IAAAF,QAAA,IAAAG,KAAA,CAAAC,OAAA,CAAAJ,QAAA;UACAD,MAAA,CAAAnC,MAAA,GAAAoC,QAAA,CAAAK,GAAA,CAAAC,OAAA;YACA,YAAA1C,MAAA,CAAA2C,IAAA,CAAArB,KAAA,IAAAA,KAAA,CAAAsB,EAAA,KAAAF,OAAA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}