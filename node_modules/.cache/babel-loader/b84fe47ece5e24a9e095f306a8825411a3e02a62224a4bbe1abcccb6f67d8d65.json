{"ast":null,"code":"// import AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n  // components: {\n  //     AgentAvatar\n  // },\n  props: ['record', \"index\"],\n  data() {\n    return {\n      record_status: null,\n      record_status_color: null,\n      record_remaining_text: null\n    };\n  },\n  created() {\n    this.getAppointmentStatus();\n  },\n  methods: {\n    getAppointmentStatus() {\n      const date1 = new Date(this.record.fields.appointment_date); // Randevu tarihini Date objesine dönüştür\n      const date2 = new Date(); // Şu anki tarih\n      var hours = Math.abs(date1 - date2) / 36e5;\n      var days = Math.round((date1 - date2) / (1000 * 60 * 60 * 24));\n      if (this.record.fields.is_cancelled) {\n        this.record_status = \"Cancelled\";\n        this.record_status_color = '#ff0000';\n      } else if (days >= 1 || hours >= 1) {\n        // date2 < date1 ise upcoming\n        this.record_status = \"Upcoming\";\n        this.record_status_color = '#FFA500';\n      } else {\n        this.record_status = \"Completed\";\n        this.record_status_color = '#00FF00';\n      }\n    },\n    calculatePositiveHoursAndDays() {\n      // İki tarihi Date objelerine dönüştürüyoruz\n      // İki tarihi Date objelerine dönüştürüyoruz\n      const start = new Date();\n      const end = new Date(this.record.fields.appointment_date);\n\n      // Zaman farkını milisaniye cinsinden alıyoruz\n      let difference = end - start;\n\n      // Milisaniyeyi saniyeye, saniyeyi dakikaya, dakikayı saate ve saati güne dönüştürüyoruz\n      const millisecondsPerSecond = 1000;\n      const secondsPerMinute = 60;\n      const minutesPerHour = 60;\n      const hoursPerDay = 24;\n      let milliseconds = difference % millisecondsPerSecond;\n      difference = (difference - milliseconds) / millisecondsPerSecond;\n      let seconds = difference % secondsPerMinute;\n      difference = (difference - seconds) / secondsPerMinute;\n      let minutes = difference % minutesPerHour;\n      difference = (difference - minutes) / minutesPerHour;\n      let hours = difference % hoursPerDay;\n      let days = (difference - hours) / hoursPerDay;\n\n      // Negatif değerleri sıfıra çeviriyoruz\n      days = Math.max(0, days);\n      hours = Math.max(0, hours);\n\n      // Sonuçları döndürüyoruz\n      return {\n        days,\n        hours,\n        minutes,\n        seconds\n      };\n    }\n  }\n};","map":{"version":3,"names":["props","data","record_status","record_status_color","record_remaining_text","created","getAppointmentStatus","methods","date1","Date","record","fields","appointment_date","date2","hours","Math","abs","days","round","is_cancelled","calculatePositiveHoursAndDays","start","end","difference","millisecondsPerSecond","secondsPerMinute","minutesPerHour","hoursPerDay","milliseconds","seconds","minutes","max"],"sources":["src/components/AppointmentsListItem.vue"],"sourcesContent":["<template>\n    <div :class=\"['appointment-item', { 'grey-background': index % 2 === 0, 'white-background': index % 2 !== 0 }]\">\n        <b-row>\n            <b-col lg=\"3\">\n                <div class=\"contact-name mb-2\">\n                    <b-icon icon=\"person\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    <b> {{ record.fields.contact_name[0] + ' ' + record.fields.contact_surname[0] }}</b>\n                </div>\n\n                <div class=\"contact-mail mb-2\">\n                    <b-icon icon=\"mailbox\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_email[0] }}\n                </div>\n\n                <div class=\"contact-phone mb-2\">\n                    <b-icon icon=\"phone\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_phone[0] }}\n                </div>\n\n            </b-col>\n            <b-col lg=\"2\" class=\"appointment_address_container\">\n                <div class=\"appointment-address mb-2\">\n                    <b-icon icon=\"house-door\" font-scale=\"1.5\" class=\"me-2\"></b-icon>\n                    <b style=\"font-size: 15px;\">\n                        {{ record.fields.appointment_address }}</b>\n                </div>\n            </b-col>\n            <b-col lg=\"4\" class=\"appointment_address_container\">\n                <div class=\"appointment-status-box bg-primary\">\n                    <b-row class=\"m-0\">\n                        <b-col lg=\"6\" class=\"status-area text-center\">\n                            <span :style=\"'color:' + record_status_color\">\n                                {{ record_status }} </span>\n                            <span>{{ record_remaining_text }}</span>\n                        </b-col>\n                        <b-col lg=\"6\" class=\"date-area text-center\">\n                            <b-icon class=\"text-white\" font-scale=\"0.9\" icon=\"clock\"></b-icon>\n                            <span class=\"text-white ms-1\" style=\"font-size: 14px;\"> {{\n                                formatAppointmentDate(record.fields.appointment_date) }}</span>\n                        </b-col>\n                    </b-row>\n                </div>\n            </b-col>\n            <b-col lg=\"3\">\n                {{ calculatePositiveHoursAndDays() }}\n                <!-- <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                    <AgentAvatar :agent=\"agent\" />\n                </div> -->\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<script>\n// import AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n    // components: {\n    //     AgentAvatar\n    // },\n    props: ['record', \"index\"],\n    data() {\n        return {\n            record_status: null,\n            record_status_color: null,\n            record_remaining_text: null,\n        }\n    },\n    created() {\n        this.getAppointmentStatus()\n    },\n    methods: {\n        getAppointmentStatus() {\n            const date1 = new Date(this.record.fields.appointment_date); // Randevu tarihini Date objesine dönüştür\n            const date2 = new Date(); // Şu anki tarih\n            var hours = Math.abs(date1 - date2) / 36e5;\n            var days = Math.round((date1 - date2) / (1000 * 60 * 60 * 24));\n            if (this.record.fields.is_cancelled) {\n                this.record_status = \"Cancelled\";\n                this.record_status_color = '#ff0000';\n            } else if (days >= 1 || hours >= 1) { // date2 < date1 ise upcoming\n                this.record_status = \"Upcoming\";\n                this.record_status_color = '#FFA500';\n            } else {\n                this.record_status = \"Completed\";\n                this.record_status_color = '#00FF00';\n            }\n        },\n\n        calculatePositiveHoursAndDays() {\n            // İki tarihi Date objelerine dönüştürüyoruz\n            // İki tarihi Date objelerine dönüştürüyoruz\n            const start = new Date();\n            const end = new Date(this.record.fields.appointment_date);\n\n\n            // Zaman farkını milisaniye cinsinden alıyoruz\n            let difference = end - start;\n\n            // Milisaniyeyi saniyeye, saniyeyi dakikaya, dakikayı saate ve saati güne dönüştürüyoruz\n            const millisecondsPerSecond = 1000;\n            const secondsPerMinute = 60;\n            const minutesPerHour = 60;\n            const hoursPerDay = 24;\n\n            let milliseconds = difference % millisecondsPerSecond;\n            difference = (difference - milliseconds) / millisecondsPerSecond;\n            let seconds = difference % secondsPerMinute;\n            difference = (difference - seconds) / secondsPerMinute;\n            let minutes = difference % minutesPerHour;\n            difference = (difference - minutes) / minutesPerHour;\n            let hours = difference % hoursPerDay;\n            let days = (difference - hours) / hoursPerDay;\n\n            // Negatif değerleri sıfıra çeviriyoruz\n            days = Math.max(0, days);\n            hours = Math.max(0, hours);\n\n            // Sonuçları döndürüyoruz\n            return { days, hours, minutes, seconds };\n        }\n\n    }\n};\n</script>\n"],"mappings":"AAsDA;;AAEA;EACA;EACA;EACA;EACAA,KAAA;EACAC,KAAA;IACA;MACAC,aAAA;MACAC,mBAAA;MACAC,qBAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,oBAAA;EACA;EACAC,OAAA;IACAD,qBAAA;MACA,MAAAE,KAAA,OAAAC,IAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,gBAAA;MACA,MAAAC,KAAA,OAAAJ,IAAA;MACA,IAAAK,KAAA,GAAAC,IAAA,CAAAC,GAAA,CAAAR,KAAA,GAAAK,KAAA;MACA,IAAAI,IAAA,GAAAF,IAAA,CAAAG,KAAA,EAAAV,KAAA,GAAAK,KAAA;MACA,SAAAH,MAAA,CAAAC,MAAA,CAAAQ,YAAA;QACA,KAAAjB,aAAA;QACA,KAAAC,mBAAA;MACA,WAAAc,IAAA,SAAAH,KAAA;QAAA;QACA,KAAAZ,aAAA;QACA,KAAAC,mBAAA;MACA;QACA,KAAAD,aAAA;QACA,KAAAC,mBAAA;MACA;IACA;IAEAiB,8BAAA;MACA;MACA;MACA,MAAAC,KAAA,OAAAZ,IAAA;MACA,MAAAa,GAAA,OAAAb,IAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,gBAAA;;MAGA;MACA,IAAAW,UAAA,GAAAD,GAAA,GAAAD,KAAA;;MAEA;MACA,MAAAG,qBAAA;MACA,MAAAC,gBAAA;MACA,MAAAC,cAAA;MACA,MAAAC,WAAA;MAEA,IAAAC,YAAA,GAAAL,UAAA,GAAAC,qBAAA;MACAD,UAAA,IAAAA,UAAA,GAAAK,YAAA,IAAAJ,qBAAA;MACA,IAAAK,OAAA,GAAAN,UAAA,GAAAE,gBAAA;MACAF,UAAA,IAAAA,UAAA,GAAAM,OAAA,IAAAJ,gBAAA;MACA,IAAAK,OAAA,GAAAP,UAAA,GAAAG,cAAA;MACAH,UAAA,IAAAA,UAAA,GAAAO,OAAA,IAAAJ,cAAA;MACA,IAAAZ,KAAA,GAAAS,UAAA,GAAAI,WAAA;MACA,IAAAV,IAAA,IAAAM,UAAA,GAAAT,KAAA,IAAAa,WAAA;;MAEA;MACAV,IAAA,GAAAF,IAAA,CAAAgB,GAAA,IAAAd,IAAA;MACAH,KAAA,GAAAC,IAAA,CAAAgB,GAAA,IAAAjB,KAAA;;MAEA;MACA;QAAAG,IAAA;QAAAH,KAAA;QAAAgB,OAAA;QAAAD;MAAA;IACA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}