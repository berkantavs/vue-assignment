{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport DatePick from 'vue-date-pick';\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      currentPage: 1,\n      itemsPerPage: 10,\n      selectedAgents: [],\n      selectedStatus: null,\n      statuses: [{\n        value: null,\n        text: 'All Statutes'\n      }, {\n        value: 'cancelled',\n        text: 'Cancelled'\n      }, {\n        value: 'upcoming',\n        text: 'Upcoming'\n      }, {\n        value: 'completed',\n        text: 'Completed'\n      }],\n      filterStartDate: '',\n      filterEndDate: ''\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n  async created() {\n    this.fetchAppointments();\n    this.fetchAgents();\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        console.log(this.records);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n        console.log(this.agents);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchRecords","fetchAgents","AgentAvatar","DatePick","components","data","records","agents","currentPage","itemsPerPage","selectedAgents","selectedStatus","statuses","value","text","filterStartDate","filterEndDate","computed","totalPages","Math","ceil","length","paginatedData","start","end","slice","created","fetchAppointments","methods","setSelectedAgent","agent","includes","push","setDeselectedAgent","index","indexOf","splice","tableName","console","log","error","formatDate","dateStr","date","Date","toLocaleDateString","toLocaleTimeString","prevPage","nextPage"],"sources":["src/components/AppointmentsList.vue"],"sourcesContent":["<template>\n  <div class=\"mt-5 mb-5\">\n    <b-container>\n      <div class=\"appointments-list\">\n        <div class=\"filter-area mb-3 mt-2\">\n          <b-row>\n            <b-col lg=\"2\">\n              <div class=\"avatar-container\">\n                <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                  <AgentAvatar :agent=\"agent\" @selectedAgent=\"setSelectedAgent\" @deselectedAgent=\"setDeselectedAgent\" />\n                </div>\n                <div v-if=\"agents.length > 5\" class=\"avatar-wrapper\">\n                  <b-avatar class=\"agent-avatar-item\" style=\"background-color: #ccc;\">\n                    +{{ agents.length - 5 }}\n                  </b-avatar>\n                </div>\n              </div>\n            </b-col>\n            <b-col lg=\"6\">\n              <b-row>\n                <b-col>\n                  <div class=\"status-select-box-area\">\n                    <b-form-select v-model=\"selectedStatus\" :options=\"statuses\"></b-form-select>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area\">\n                    <date-pick v-model=\"filterStartDate\" :pickTime=\"true\" :format=\"'DD-MM-YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area\">\n                    <date-pick v-model=\"filterEndDate\" :pickTime=\"true\" :format=\"'DD-MM-YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n              </b-row>\n            </b-col>\n            <b-col lg=\"4\">\n              <div class=\"d-flex justify-content-right\">\n                <b-input-group class=\"w-50\">\n                  <b-form-input type=\"number\" min=\"0.00\"></b-form-input>\n                  <b-input-group-append>\n                    <b-button variant=\"outline-secondary\">Button</b-button>\n                  </b-input-group-append>\n                </b-input-group>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        {{ selectedAgents }}\n      </div>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport DatePick from 'vue-date-pick';\n\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      currentPage: 1,\n      itemsPerPage: 10,\n      selectedAgents: [],\n      selectedStatus: null,\n      statuses: [\n        { value: null, text: 'All Statutes' },\n        { value: 'cancelled', text: 'Cancelled' },\n        { value: 'upcoming', text: 'Upcoming' },\n        { value: 'completed', text: 'Completed' },\n      ],\n      filterStartDate: '',\n      filterEndDate: '',\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n  async created() {\n    this.fetchAppointments();\n    this.fetchAgents();\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        console.log(this.records);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n        console.log(this.agents);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    },\n  }\n};\n</script>\n"],"mappings":";AAwDA,SAAAA,YAAA;AACA,SAAAC,WAAA;AACA,OAAAC,WAAA;AACA,OAAAC,QAAA;AAEA;EACAC,UAAA;IACAF,WAAA;IACAC;EACA;EACAE,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;MACAC,WAAA;MACAC,YAAA;MACAC,cAAA;MACAC,cAAA;MACAC,QAAA,GACA;QAAAC,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,EACA;MACAC,eAAA;MACAC,aAAA;IACA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,OAAAC,IAAA,CAAAC,IAAA,MAAAd,OAAA,CAAAe,MAAA,QAAAZ,YAAA;IACA;IACAa,cAAA;MACA,MAAAC,KAAA,SAAAf,WAAA,aAAAC,YAAA;MACA,MAAAe,GAAA,GAAAD,KAAA,QAAAd,YAAA;MACA,YAAAH,OAAA,CAAAmB,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;EACA;EACA,MAAAE,QAAA;IACA,KAAAC,iBAAA;IACA,KAAA1B,WAAA;EACA;EACA2B,OAAA;IACAC,iBAAAC,KAAA;MACA,UAAApB,cAAA,CAAAqB,QAAA,CAAAD,KAAA;QACA,KAAApB,cAAA,CAAAsB,IAAA,CAAAF,KAAA;MACA;IACA;IACAG,mBAAAH,KAAA;MACA,MAAAI,KAAA,QAAAxB,cAAA,CAAAyB,OAAA,CAAAL,KAAA;MACA,IAAAI,KAAA;QACA,KAAAxB,cAAA,CAAA0B,MAAA,CAAAF,KAAA;MACA;IACA;IACA,MAAAP,kBAAA;MACA,MAAAU,SAAA;MACA;QACA,KAAA/B,OAAA,SAAAN,YAAA,CAAAqC,SAAA;QACAC,OAAA,CAAAC,GAAA,MAAAjC,OAAA;MAEA,SAAAkC,KAAA;QACAF,OAAA,CAAAE,KAAA,yBAAAA,KAAA;MACA;IACA;IACA,MAAAvC,YAAA;MACA,MAAAoC,SAAA;MACA;QACA,KAAA9B,MAAA,SAAAN,WAAA,CAAAoC,SAAA;QACAC,OAAA,CAAAC,GAAA,MAAAhC,MAAA;MAEA,SAAAiC,KAAA;QACAF,OAAA,CAAAE,KAAA,yBAAAA,KAAA;MACA;IACA;IACAC,WAAAC,OAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,OAAA;MACA,OAAAC,IAAA,CAAAE,kBAAA,WAAAF,IAAA,CAAAG,kBAAA;IACA;IACAC,SAAA;MACA,SAAAvC,WAAA;QACA,KAAAA,WAAA;MACA;IACA;IACAwC,SAAA;MACA,SAAAxC,WAAA,QAAAU,UAAA;QACA,KAAAV,WAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}