{"ast":null,"code":"// import AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n  // components: {\n  //     AgentAvatar\n  // },\n  props: ['record', \"index\"],\n  data() {\n    return {\n      record_status: null,\n      record_status_color: null,\n      record_remaining_text: null\n    };\n  },\n  created() {\n    this.getAppointmentStatus();\n  },\n  methods: {\n    getAppointmentStatus() {\n      const date1 = new Date(this.record.fields.appointment_date); // Randevu tarihini Date objesine dönüştür\n      const date2 = new Date(); // Şu anki tarih\n      console.log(date1, 'record date');\n      console.log(date2, 'bugün');\n      // Date objelerini getTime() ile milisaniye cinsine çevirip karşılaştırma yapalım\n      if (this.record.fields.is_cancelled) {\n        this.record_status = \"Cancelled\";\n        this.record_status_color = '#ff0000';\n        this.record_remaining_text = ''; // İptal edilen randevular için kalan süre temizlenir\n      } else if (date1.getTime() < date2.getTime()) {\n        // date2 < date1 ise upcoming\n        this.record_status = \"Upcoming\";\n        this.record_status_color = '#FFA500';\n      } else {\n        this.record_status = \"Completed\";\n        this.record_status_color = '#00FF00';\n      }\n    },\n    calculateDaysDifference(dateString) {\n      const date1 = new Date(dateString); // Verilen tarih stringini Date objesine dönüştür\n      const date2 = new Date(); // Şu anki tarih\n\n      var hours = Math.abs(date1 - date2) / 36e5;\n      var days = Math.round((date1 - date2) / (1000 * 60 * 60 * 24));\n      if (days >= 1) {\n        return days + ' days';\n      } else {\n        return hours + ' hours';\n      }\n    },\n    formatAppointmentDate(dateString) {\n      const date = new Date(dateString);\n      const day = String(date.getUTCDate()).padStart(2, '0');\n      const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // getUTCMonth() 0-11 arası değer döner, bu yüzden +1 eklenir\n      const year = date.getUTCFullYear();\n      const hours = String(date.getUTCHours()).padStart(2, '0');\n      const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n      return `${day}/${month}/${year} ${hours}:${minutes}`;\n    }\n  }\n};","map":{"version":3,"names":["props","data","record_status","record_status_color","record_remaining_text","created","getAppointmentStatus","methods","date1","Date","record","fields","appointment_date","date2","console","log","is_cancelled","getTime","calculateDaysDifference","dateString","hours","Math","abs","days","round","formatAppointmentDate","date","day","String","getUTCDate","padStart","month","getUTCMonth","year","getUTCFullYear","getUTCHours","minutes","getUTCMinutes"],"sources":["src/components/AppointmentsListItem.vue"],"sourcesContent":["<template>\n    <div :class=\"['appointment-item', { 'grey-background': index % 2 === 0, 'white-background': index % 2 !== 0 }]\">\n        <b-row>\n            <b-col lg=\"3\">\n                <div class=\"contact-name mb-2\">\n                    <b-icon icon=\"person\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    <b> {{ record.fields.contact_name[0] + ' ' + record.fields.contact_surname[0] }}</b>\n                </div>\n\n                <div class=\"contact-mail mb-2\">\n                    <b-icon icon=\"mailbox\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_email[0] }}\n                </div>\n\n                <div class=\"contact-phone mb-2\">\n                    <b-icon icon=\"phone\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_phone[0] }}\n                </div>\n\n            </b-col>\n            <b-col lg=\"2\" class=\"appointment_address_container\">\n                <div class=\"appointment-address mb-2\">\n                    <b-icon icon=\"house-door\" font-scale=\"1.5\" class=\"me-2\"></b-icon>\n                    <b style=\"font-size: 15px;\">\n                        {{ record.fields.appointment_address }}</b>\n                </div>\n            </b-col>\n            <b-col lg=\"4\" class=\"appointment_address_container\">\n                <div class=\"appointment-status-box bg-primary\">\n                    <b-row class=\"m-0\">\n                        <b-col lg=\"6\" class=\"status-area text-center\">\n                            <span :style=\"'color:' + record_status_color\">\n                                {{ record_status }} </span>\n                            <span>{{ record_remaining_text }}</span>\n                        </b-col>\n                        <b-col lg=\"6\" class=\"date-area text-center\">\n                            <b-icon class=\"text-white\" font-scale=\"0.9\" icon=\"clock\"></b-icon>\n                            <span class=\"text-white ms-1\" style=\"font-size: 14px;\"> {{\n                                formatAppointmentDate(record.fields.appointment_date) }}</span>\n                        </b-col>\n                    </b-row>\n                </div>\n            </b-col>\n            <b-col lg=\"3\">\n                {{ calculateDaysDifference(record.fields.appointment_date) }}\n                <!-- <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                    <AgentAvatar :agent=\"agent\" />\n                </div> -->\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<script>\n// import AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n    // components: {\n    //     AgentAvatar\n    // },\n    props: ['record', \"index\"],\n    data() {\n        return {\n            record_status: null,\n            record_status_color: null,\n            record_remaining_text: null,\n        }\n    },\n    created() {\n        this.getAppointmentStatus()\n    },\n    methods: {\n        getAppointmentStatus() {\n            const date1 = new Date(this.record.fields.appointment_date); // Randevu tarihini Date objesine dönüştür\n            const date2 = new Date(); // Şu anki tarih\n            console.log(date1, 'record date');\n            console.log(date2, 'bugün');\n            // Date objelerini getTime() ile milisaniye cinsine çevirip karşılaştırma yapalım\n            if (this.record.fields.is_cancelled) {\n                this.record_status = \"Cancelled\";\n                this.record_status_color = '#ff0000';\n                this.record_remaining_text = ''; // İptal edilen randevular için kalan süre temizlenir\n            } else if (date1.getTime() < date2.getTime()) { // date2 < date1 ise upcoming\n                this.record_status = \"Upcoming\";\n                this.record_status_color = '#FFA500';\n            } else {\n                this.record_status = \"Completed\";\n                this.record_status_color = '#00FF00';\n            }\n        },\n\n        calculateDaysDifference(dateString) {\n            const date1 = new Date(dateString); // Verilen tarih stringini Date objesine dönüştür\n            const date2 = new Date(); // Şu anki tarih\n\n            var hours = Math.abs(date1 - date2) / 36e5;\n            var days = Math.round((date1 - date2) / (1000 * 60 * 60 * 24));\n\n            if (days >= 1) {\n                return days + ' days'\n            } else {\n                return hours + ' hours'\n            }\n        },\n        formatAppointmentDate(dateString) {\n            const date = new Date(dateString);\n            const day = String(date.getUTCDate()).padStart(2, '0');\n            const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // getUTCMonth() 0-11 arası değer döner, bu yüzden +1 eklenir\n            const year = date.getUTCFullYear();\n            const hours = String(date.getUTCHours()).padStart(2, '0');\n            const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n\n            return `${day}/${month}/${year} ${hours}:${minutes}`;\n        }\n\n    }\n};\n</script>\n"],"mappings":"AAsDA;;AAEA;EACA;EACA;EACA;EACAA,KAAA;EACAC,KAAA;IACA;MACAC,aAAA;MACAC,mBAAA;MACAC,qBAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,oBAAA;EACA;EACAC,OAAA;IACAD,qBAAA;MACA,MAAAE,KAAA,OAAAC,IAAA,MAAAC,MAAA,CAAAC,MAAA,CAAAC,gBAAA;MACA,MAAAC,KAAA,OAAAJ,IAAA;MACAK,OAAA,CAAAC,GAAA,CAAAP,KAAA;MACAM,OAAA,CAAAC,GAAA,CAAAF,KAAA;MACA;MACA,SAAAH,MAAA,CAAAC,MAAA,CAAAK,YAAA;QACA,KAAAd,aAAA;QACA,KAAAC,mBAAA;QACA,KAAAC,qBAAA;MACA,WAAAI,KAAA,CAAAS,OAAA,KAAAJ,KAAA,CAAAI,OAAA;QAAA;QACA,KAAAf,aAAA;QACA,KAAAC,mBAAA;MACA;QACA,KAAAD,aAAA;QACA,KAAAC,mBAAA;MACA;IACA;IAEAe,wBAAAC,UAAA;MACA,MAAAX,KAAA,OAAAC,IAAA,CAAAU,UAAA;MACA,MAAAN,KAAA,OAAAJ,IAAA;;MAEA,IAAAW,KAAA,GAAAC,IAAA,CAAAC,GAAA,CAAAd,KAAA,GAAAK,KAAA;MACA,IAAAU,IAAA,GAAAF,IAAA,CAAAG,KAAA,EAAAhB,KAAA,GAAAK,KAAA;MAEA,IAAAU,IAAA;QACA,OAAAA,IAAA;MACA;QACA,OAAAH,KAAA;MACA;IACA;IACAK,sBAAAN,UAAA;MACA,MAAAO,IAAA,OAAAjB,IAAA,CAAAU,UAAA;MACA,MAAAQ,GAAA,GAAAC,MAAA,CAAAF,IAAA,CAAAG,UAAA,IAAAC,QAAA;MACA,MAAAC,KAAA,GAAAH,MAAA,CAAAF,IAAA,CAAAM,WAAA,QAAAF,QAAA;MACA,MAAAG,IAAA,GAAAP,IAAA,CAAAQ,cAAA;MACA,MAAAd,KAAA,GAAAQ,MAAA,CAAAF,IAAA,CAAAS,WAAA,IAAAL,QAAA;MACA,MAAAM,OAAA,GAAAR,MAAA,CAAAF,IAAA,CAAAW,aAAA,IAAAP,QAAA;MAEA,UAAAH,GAAA,IAAAI,KAAA,IAAAE,IAAA,IAAAb,KAAA,IAAAgB,OAAA;IACA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}