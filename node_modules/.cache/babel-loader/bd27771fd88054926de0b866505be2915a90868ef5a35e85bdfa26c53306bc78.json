{"ast":null,"code":"import AgentAvatar from './AgentAvatar.vue';\nexport default {\n  props: ['record', 'index', 'agents'],\n  components: {\n    AgentAvatar\n  },\n  data() {\n    return {\n      recordStatus: '',\n      recordStatusColor: '',\n      recordRemainingText: ''\n    };\n  },\n  computed: {\n    agentsForAppointment() {\n      return this.record.fields.agent_id.map(agentId => {\n        return this.agents.find(agent => agent.id === agentId) || {};\n      }).map(agent => {\n        return {\n          agent_name: agent.fields.agent_name,\n          agent_surname: agent.fields.agent_surname,\n          agent_id: agent.id,\n          color: agent.fields.color\n        };\n      });\n    }\n  },\n  watch: {\n    record: {\n      immediate: true,\n      handler(newValue, oldValue) {\n        if (newValue !== oldValue) {\n          this.calculatePositiveHoursAndDays();\n        }\n      }\n    }\n  },\n  methods: {\n    setSelectedAgent(agent) {},\n    setDeselectedAgent(agent) {},\n    calculatePositiveHoursAndDays() {\n      const start = new Date();\n      const end = new Date(this.record.fields.appointment_date);\n      let difference = end - start;\n      const millisecondsPerSecond = 1000;\n      const secondsPerMinute = 60;\n      const minutesPerHour = 60;\n      const hoursPerDay = 24;\n      let milliseconds = difference % millisecondsPerSecond;\n      difference = (difference - milliseconds) / millisecondsPerSecond;\n      let seconds = difference % secondsPerMinute;\n      difference = (difference - seconds) / secondsPerMinute;\n      let minutes = difference % minutesPerHour;\n      difference = (difference - minutes) / minutesPerHour;\n      let hours = difference % hoursPerDay;\n      let days = (difference - hours) / hoursPerDay;\n      days = Math.max(0, days);\n      hours = Math.max(0, hours);\n      if (days > 0) {\n        this.recordRemainingText = `${days} days`;\n      } else if (days <= 0 && hours > 0) {\n        this.recordRemainingText = `${hours} hours`;\n      }\n      const now = new Date();\n      if (this.record.fields.is_cancelled) {\n        this.recordStatus = 'Cancelled';\n        this.recordStatusColor = '#ff0000';\n      } else if (end > now) {\n        this.recordStatus = 'Upcoming';\n        this.recordStatusColor = '#ffa500';\n      } else {\n        this.recordStatus = 'Completed';\n        this.recordStatusColor = '#008000';\n      }\n    },\n    formatAppointmentDate(dateString) {\n      const date = new Date(dateString);\n      const day = String(date.getUTCDate()).padStart(2, '0');\n      const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n      const year = date.getUTCFullYear();\n      const hours = String(date.getUTCHours()).padStart(2, '0');\n      const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n      return `${day}/${month}/${year} ${hours}:${minutes}`;\n    }\n  }\n};","map":{"version":3,"names":["AgentAvatar","props","components","data","recordStatus","recordStatusColor","recordRemainingText","computed","agentsForAppointment","record","fields","agent_id","map","agentId","agents","find","agent","id","agent_name","agent_surname","color","watch","immediate","handler","newValue","oldValue","calculatePositiveHoursAndDays","methods","setSelectedAgent","setDeselectedAgent","start","Date","end","appointment_date","difference","millisecondsPerSecond","secondsPerMinute","minutesPerHour","hoursPerDay","milliseconds","seconds","minutes","hours","days","Math","max","now","is_cancelled","formatAppointmentDate","dateString","date","day","String","getUTCDate","padStart","month","getUTCMonth","year","getUTCFullYear","getUTCHours","getUTCMinutes"],"sources":["src/components/AppointmentsListItem.vue"],"sourcesContent":["<template>\n    <div :class=\"['appointment-item', { 'grey-background': index % 2 === 0, 'white-background': index % 2 !== 0 }]\">\n        <b-row>\n            <b-col lg=\"3\">\n                <div class=\"contact-name mb-2\">\n                    <b-icon icon=\"person\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    <b>{{ record.fields.contact_name[0] + ' ' + record.fields.contact_surname[0] }}</b>\n                </div>\n\n                <div class=\"contact-mail mb-2\">\n                    <b-icon icon=\"mailbox\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_email[0] }}\n                </div>\n\n                <div class=\"contact-phone mb-2\">\n                    <b-icon icon=\"phone\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_phone[0] }}\n                </div>\n            </b-col>\n            <b-col lg=\"2\" class=\"appointment_address_container\">\n                <div class=\"appointment-address mb-2\">\n                    <b-icon icon=\"house-door\" font-scale=\"1.5\" class=\"me-2\"></b-icon>\n                    <b style=\"font-size: 15px;\">{{ record.fields.appointment_address }}</b>\n                </div>\n            </b-col>\n            <b-col lg=\"4\" class=\"appointment_address_container\">\n                <div class=\"appointment-status-box bg-primary\">\n                    <b-row class=\"m-0\">\n                        <b-col lg=\"6\" class=\"status-area text-center\">\n                            <span :style=\"'color:' + recordStatusColor\">{{ recordStatus }}</span>\n                            <span>{{ recordRemainingText }}</span>\n                        </b-col>\n                        <b-col lg=\"6\" class=\"date-area text-center\">\n                            <b-icon class=\"text-white\" font-scale=\"0.9\" icon=\"clock\"></b-icon>\n                            <span class=\"text-white ms-1\" style=\"font-size: 14px;\">{{\n                                formatAppointmentDate(record.fields.appointment_date) }}</span>\n                        </b-col>\n                    </b-row>\n                </div>\n            </b-col>\n            <b-col lg=\"3\">\n\n                <div v-for=\"(agent, index) in agentsForAppointment\" :key=\"index\" class=\"avatar-wrapper\">\n                    <AgentAvatar :agent=\"agent\" @selectedAgent=\"setSelectedAgent\"\n                        @deselectedAgent=\"setDeselectedAgent\" />\n                </div>\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<script>\nimport AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n    props: ['record', 'index', 'agents'],\n    components: { AgentAvatar },\n    data() {\n        return {\n            recordStatus: '',\n            recordStatusColor: '',\n            recordRemainingText: ''\n        };\n    },\n    computed: {\n        agentsForAppointment() {\n            return this.record.fields.agent_id.map(agentId => {\n                return this.agents.find(agent => agent.id === agentId) || {};\n            }).map(agent => {\n                return {\n                    agent_name: agent.fields.agent_name,\n                    agent_surname: agent.fields.agent_surname,\n                    agent_id: agent.id,\n                    color: agent.fields.color\n                };\n            });\n        }\n    },\n    watch: {\n        record: {\n            immediate: true,\n            handler(newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    this.calculatePositiveHoursAndDays();\n                }\n            }\n        }\n    },\n    methods: {\n        setSelectedAgent(agent) {\n\n        },\n        setDeselectedAgent(agent) {\n\n        },\n        calculatePositiveHoursAndDays() {\n            const start = new Date();\n            const end = new Date(this.record.fields.appointment_date);\n\n            let difference = end - start;\n\n            const millisecondsPerSecond = 1000;\n            const secondsPerMinute = 60;\n            const minutesPerHour = 60;\n            const hoursPerDay = 24;\n\n            let milliseconds = difference % millisecondsPerSecond;\n            difference = (difference - milliseconds) / millisecondsPerSecond;\n            let seconds = difference % secondsPerMinute;\n            difference = (difference - seconds) / secondsPerMinute;\n            let minutes = difference % minutesPerHour;\n            difference = (difference - minutes) / minutesPerHour;\n            let hours = difference % hoursPerDay;\n            let days = (difference - hours) / hoursPerDay;\n\n            days = Math.max(0, days);\n            hours = Math.max(0, hours);\n\n            if (days > 0) {\n                this.recordRemainingText = `${days} days`;\n            } else if (days <= 0 && hours > 0) {\n                this.recordRemainingText = `${hours} hours`;\n            }\n\n            const now = new Date();\n            if (this.record.fields.is_cancelled) {\n                this.recordStatus = 'Cancelled';\n                this.recordStatusColor = '#ff0000';\n            } else if (end > now) {\n                this.recordStatus = 'Upcoming';\n                this.recordStatusColor = '#ffa500';\n            } else {\n                this.recordStatus = 'Completed';\n                this.recordStatusColor = '#008000';\n            }\n        },\n        formatAppointmentDate(dateString) {\n            const date = new Date(dateString);\n            const day = String(date.getUTCDate()).padStart(2, '0');\n            const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n            const year = date.getUTCFullYear();\n            const hours = String(date.getUTCHours()).padStart(2, '0');\n            const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n\n            return `${day}/${month}/${year} ${hours}:${minutes}`;\n        }\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}