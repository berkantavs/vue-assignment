{"ast":null,"code":"// import AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n  // components: {\n  //     AgentAvatar\n  // },\n  props: ['record', \"index\"],\n  data() {\n    return {\n      recordStatus: '',\n      recordStatusColor: '',\n      recordRemainingText: ''\n    };\n  },\n  created() {\n    this.getAppointmentStatus();\n  },\n  computed: {\n    computed: {\n      calculatePositiveHoursAndDays() {\n        // İki tarih arasındaki pozitif saat ve günleri hesaplayacak fonksiyon\n        const start = new Date(this.startDate);\n        const end = new Date(this.endDate);\n        if (start >= end) {\n          throw new Error('Başlangıç tarihi, bitiş tarihinden büyük veya eşit olamaz.');\n        }\n        let difference = end - start;\n        const millisecondsPerSecond = 1000;\n        const secondsPerMinute = 60;\n        const minutesPerHour = 60;\n        const hoursPerDay = 24;\n        let milliseconds = difference % millisecondsPerSecond;\n        difference = (difference - milliseconds) / millisecondsPerSecond;\n        let seconds = difference % secondsPerMinute;\n        difference = (difference - seconds) / secondsPerMinute;\n        let minutes = difference % minutesPerHour;\n        difference = (difference - minutes) / minutesPerHour;\n        let hours = difference % hoursPerDay;\n        let days = (difference - hours) / hoursPerDay;\n\n        // Negatif değerleri sıfıra çeviriyoruz\n        days = Math.max(0, days);\n        hours = Math.max(0, hours);\n\n        // recordRemainingText'i oluşturuyoruz\n        if (days > 0 && hours > 0) {\n          this.recordRemainingText = `${days} days and ${hours} hours remaining`;\n        } else if (days > 0) {\n          this.recordRemainingText = `${days} days remaining`;\n        } else if (hours > 0) {\n          this.recordRemainingText = `${hours} hours remaining`;\n        } else {\n          this.recordRemainingText = 'Less than an hour remaining';\n        }\n\n        // recordStatus ve recordStatusColor'u ayarlıyoruz\n        const now = new Date();\n        if (end > now) {\n          this.recordStatus = 'Upcoming';\n          this.recordStatusColor = '#ffa500'; // Turuncu\n        } else if (start > now) {\n          this.recordStatus = 'Cancelled';\n          this.recordStatusColor = '#ff0000'; // Kırmızı\n        } else {\n          this.recordStatus = 'Completed';\n          this.recordStatusColor = '#008000'; // Yeşil\n        }\n      }\n    }\n  },\n  methods: {\n    getAppointmentStatus() {\n      const date1 = new Date(this.record.fields.appointment_date); // Randevu tarihini Date objesine dönüştür\n      const date2 = new Date(); // Şu anki tarih\n      var hours = Math.abs(date1 - date2) / 36e5;\n      var days = Math.round((date1 - date2) / (1000 * 60 * 60 * 24));\n      if (this.record.fields.is_cancelled) {\n        this.record_status = \"Cancelled\";\n        this.record_status_color = '#ff0000';\n      } else if (days >= 1 || hours >= 1) {\n        // date2 < date1 ise upcoming\n        this.record_status = \"Upcoming\";\n        this.record_status_color = '#FFA500';\n      } else {\n        this.record_status = \"Completed\";\n        this.record_status_color = '#00FF00';\n      }\n    },\n    formatAppointmentDate(dateString) {\n      const date = new Date(dateString);\n      const day = String(date.getUTCDate()).padStart(2, '0');\n      const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // getUTCMonth() 0-11 arası değer döner, bu yüzden +1 eklenir\n      const year = date.getUTCFullYear();\n      const hours = String(date.getUTCHours()).padStart(2, '0');\n      const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n      return `${day}/${month}/${year} ${hours}:${minutes}`;\n    }\n  }\n};","map":{"version":3,"names":["props","data","recordStatus","recordStatusColor","recordRemainingText","created","getAppointmentStatus","computed","calculatePositiveHoursAndDays","start","Date","startDate","end","endDate","Error","difference","millisecondsPerSecond","secondsPerMinute","minutesPerHour","hoursPerDay","milliseconds","seconds","minutes","hours","days","Math","max","now","methods","date1","record","fields","appointment_date","date2","abs","round","is_cancelled","record_status","record_status_color","formatAppointmentDate","dateString","date","day","String","getUTCDate","padStart","month","getUTCMonth","year","getUTCFullYear","getUTCHours","getUTCMinutes"],"sources":["src/components/AppointmentsListItem.vue"],"sourcesContent":["<template>\n    <div :class=\"['appointment-item', { 'grey-background': index % 2 === 0, 'white-background': index % 2 !== 0 }]\">\n        <b-row>\n            <b-col lg=\"3\">\n                <div class=\"contact-name mb-2\">\n                    <b-icon icon=\"person\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    <b> {{ record.fields.contact_name[0] + ' ' + record.fields.contact_surname[0] }}</b>\n                </div>\n\n                <div class=\"contact-mail mb-2\">\n                    <b-icon icon=\"mailbox\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_email[0] }}\n                </div>\n\n                <div class=\"contact-phone mb-2\">\n                    <b-icon icon=\"phone\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_phone[0] }}\n                </div>\n\n            </b-col>\n            <b-col lg=\"2\" class=\"appointment_address_container\">\n                <div class=\"appointment-address mb-2\">\n                    <b-icon icon=\"house-door\" font-scale=\"1.5\" class=\"me-2\"></b-icon>\n                    <b style=\"font-size: 15px;\">\n                        {{ record.fields.appointment_address }}</b>\n                </div>\n            </b-col>\n            <b-col lg=\"4\" class=\"appointment_address_container\">\n                <div class=\"appointment-status-box bg-primary\">\n                    <b-row class=\"m-0\">\n                        <b-col lg=\"6\" class=\"status-area text-center\">\n                            <span :style=\"'color:' + recordStatusColor\">\n                                {{ recordStatus }}\n                            </span>\n                            <span>\n                                {{ recordRemainingText }}\n                            </span>\n                        </b-col>\n                        <b-col lg=\"6\" class=\"date-area text-center\">\n                            <b-icon class=\"text-white\" font-scale=\"0.9\" icon=\"clock\"></b-icon>\n                            <span class=\"text-white ms-1\" style=\"font-size: 14px;\"> {{\n                                formatAppointmentDate(record.fields.appointment_date) }}</span>\n                        </b-col>\n                    </b-row>\n                </div>\n            </b-col>\n            <b-col lg=\"3\">\n                {{ calculatePositiveHoursAndDays }}\n                <!-- <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                    <AgentAvatar :agent=\"agent\" />\n                </div> -->\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<script>\n// import AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n    // components: {\n    //     AgentAvatar\n    // },\n    props: ['record', \"index\"],\n    data() {\n        return {\n            recordStatus: '',\n            recordStatusColor: '',\n            recordRemainingText: ''\n\n        }\n    },\n    created() {\n        this.getAppointmentStatus()\n    },\n    computed: {\n        computed: {\n            calculatePositiveHoursAndDays() {\n                // İki tarih arasındaki pozitif saat ve günleri hesaplayacak fonksiyon\n                const start = new Date(this.startDate);\n                const end = new Date(this.endDate);\n\n                if (start >= end) {\n                    throw new Error('Başlangıç tarihi, bitiş tarihinden büyük veya eşit olamaz.');\n                }\n\n                let difference = end - start;\n\n                const millisecondsPerSecond = 1000;\n                const secondsPerMinute = 60;\n                const minutesPerHour = 60;\n                const hoursPerDay = 24;\n\n                let milliseconds = difference % millisecondsPerSecond;\n                difference = (difference - milliseconds) / millisecondsPerSecond;\n                let seconds = difference % secondsPerMinute;\n                difference = (difference - seconds) / secondsPerMinute;\n                let minutes = difference % minutesPerHour;\n                difference = (difference - minutes) / minutesPerHour;\n                let hours = difference % hoursPerDay;\n                let days = (difference - hours) / hoursPerDay;\n\n                // Negatif değerleri sıfıra çeviriyoruz\n                days = Math.max(0, days);\n                hours = Math.max(0, hours);\n\n                // recordRemainingText'i oluşturuyoruz\n                if (days > 0 && hours > 0) {\n                    this.recordRemainingText = `${days} days and ${hours} hours remaining`;\n                } else if (days > 0) {\n                    this.recordRemainingText = `${days} days remaining`;\n                } else if (hours > 0) {\n                    this.recordRemainingText = `${hours} hours remaining`;\n                } else {\n                    this.recordRemainingText = 'Less than an hour remaining';\n                }\n\n                // recordStatus ve recordStatusColor'u ayarlıyoruz\n                const now = new Date();\n                if (end > now) {\n                    this.recordStatus = 'Upcoming';\n                    this.recordStatusColor = '#ffa500'; // Turuncu\n                } else if (start > now) {\n                    this.recordStatus = 'Cancelled';\n                    this.recordStatusColor = '#ff0000'; // Kırmızı\n                } else {\n                    this.recordStatus = 'Completed';\n                    this.recordStatusColor = '#008000'; // Yeşil\n                }\n            }\n        },\n    },\n    methods: {\n        getAppointmentStatus() {\n            const date1 = new Date(this.record.fields.appointment_date); // Randevu tarihini Date objesine dönüştür\n            const date2 = new Date(); // Şu anki tarih\n            var hours = Math.abs(date1 - date2) / 36e5;\n            var days = Math.round((date1 - date2) / (1000 * 60 * 60 * 24));\n            if (this.record.fields.is_cancelled) {\n                this.record_status = \"Cancelled\";\n                this.record_status_color = '#ff0000';\n            } else if (days >= 1 || hours >= 1) { // date2 < date1 ise upcoming\n                this.record_status = \"Upcoming\";\n                this.record_status_color = '#FFA500';\n            } else {\n                this.record_status = \"Completed\";\n                this.record_status_color = '#00FF00';\n            }\n        },\n\n\n        formatAppointmentDate(dateString) {\n            const date = new Date(dateString);\n            const day = String(date.getUTCDate()).padStart(2, '0');\n            const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // getUTCMonth() 0-11 arası değer döner, bu yüzden +1 eklenir\n            const year = date.getUTCFullYear();\n            const hours = String(date.getUTCHours()).padStart(2, '0');\n            const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n\n            return `${day}/${month}/${year} ${hours}:${minutes}`;\n        }\n\n    }\n};\n</script>\n"],"mappings":"AAyDA;;AAEA;EACA;EACA;EACA;EACAA,KAAA;EACAC,KAAA;IACA;MACAC,YAAA;MACAC,iBAAA;MACAC,mBAAA;IAEA;EACA;EACAC,QAAA;IACA,KAAAC,oBAAA;EACA;EACAC,QAAA;IACAA,QAAA;MACAC,8BAAA;QACA;QACA,MAAAC,KAAA,OAAAC,IAAA,MAAAC,SAAA;QACA,MAAAC,GAAA,OAAAF,IAAA,MAAAG,OAAA;QAEA,IAAAJ,KAAA,IAAAG,GAAA;UACA,UAAAE,KAAA;QACA;QAEA,IAAAC,UAAA,GAAAH,GAAA,GAAAH,KAAA;QAEA,MAAAO,qBAAA;QACA,MAAAC,gBAAA;QACA,MAAAC,cAAA;QACA,MAAAC,WAAA;QAEA,IAAAC,YAAA,GAAAL,UAAA,GAAAC,qBAAA;QACAD,UAAA,IAAAA,UAAA,GAAAK,YAAA,IAAAJ,qBAAA;QACA,IAAAK,OAAA,GAAAN,UAAA,GAAAE,gBAAA;QACAF,UAAA,IAAAA,UAAA,GAAAM,OAAA,IAAAJ,gBAAA;QACA,IAAAK,OAAA,GAAAP,UAAA,GAAAG,cAAA;QACAH,UAAA,IAAAA,UAAA,GAAAO,OAAA,IAAAJ,cAAA;QACA,IAAAK,KAAA,GAAAR,UAAA,GAAAI,WAAA;QACA,IAAAK,IAAA,IAAAT,UAAA,GAAAQ,KAAA,IAAAJ,WAAA;;QAEA;QACAK,IAAA,GAAAC,IAAA,CAAAC,GAAA,IAAAF,IAAA;QACAD,KAAA,GAAAE,IAAA,CAAAC,GAAA,IAAAH,KAAA;;QAEA;QACA,IAAAC,IAAA,QAAAD,KAAA;UACA,KAAAnB,mBAAA,MAAAoB,IAAA,aAAAD,KAAA;QACA,WAAAC,IAAA;UACA,KAAApB,mBAAA,MAAAoB,IAAA;QACA,WAAAD,KAAA;UACA,KAAAnB,mBAAA,MAAAmB,KAAA;QACA;UACA,KAAAnB,mBAAA;QACA;;QAEA;QACA,MAAAuB,GAAA,OAAAjB,IAAA;QACA,IAAAE,GAAA,GAAAe,GAAA;UACA,KAAAzB,YAAA;UACA,KAAAC,iBAAA;QACA,WAAAM,KAAA,GAAAkB,GAAA;UACA,KAAAzB,YAAA;UACA,KAAAC,iBAAA;QACA;UACA,KAAAD,YAAA;UACA,KAAAC,iBAAA;QACA;MACA;IACA;EACA;EACAyB,OAAA;IACAtB,qBAAA;MACA,MAAAuB,KAAA,OAAAnB,IAAA,MAAAoB,MAAA,CAAAC,MAAA,CAAAC,gBAAA;MACA,MAAAC,KAAA,OAAAvB,IAAA;MACA,IAAAa,KAAA,GAAAE,IAAA,CAAAS,GAAA,CAAAL,KAAA,GAAAI,KAAA;MACA,IAAAT,IAAA,GAAAC,IAAA,CAAAU,KAAA,EAAAN,KAAA,GAAAI,KAAA;MACA,SAAAH,MAAA,CAAAC,MAAA,CAAAK,YAAA;QACA,KAAAC,aAAA;QACA,KAAAC,mBAAA;MACA,WAAAd,IAAA,SAAAD,KAAA;QAAA;QACA,KAAAc,aAAA;QACA,KAAAC,mBAAA;MACA;QACA,KAAAD,aAAA;QACA,KAAAC,mBAAA;MACA;IACA;IAGAC,sBAAAC,UAAA;MACA,MAAAC,IAAA,OAAA/B,IAAA,CAAA8B,UAAA;MACA,MAAAE,GAAA,GAAAC,MAAA,CAAAF,IAAA,CAAAG,UAAA,IAAAC,QAAA;MACA,MAAAC,KAAA,GAAAH,MAAA,CAAAF,IAAA,CAAAM,WAAA,QAAAF,QAAA;MACA,MAAAG,IAAA,GAAAP,IAAA,CAAAQ,cAAA;MACA,MAAA1B,KAAA,GAAAoB,MAAA,CAAAF,IAAA,CAAAS,WAAA,IAAAL,QAAA;MACA,MAAAvB,OAAA,GAAAqB,MAAA,CAAAF,IAAA,CAAAU,aAAA,IAAAN,QAAA;MAEA,UAAAH,GAAA,IAAAI,KAAA,IAAAE,IAAA,IAAAzB,KAAA,IAAAD,OAAA;IACA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}