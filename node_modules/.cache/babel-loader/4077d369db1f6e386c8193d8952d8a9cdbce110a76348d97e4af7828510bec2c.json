{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport { fetchContacts } from '../services/contactService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport AppointmentsListItem from \"./AppointmentsListItem.vue\";\nimport DatePick from 'vue-date-pick';\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick,\n    AppointmentsListItem\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      contacts: [],\n      selectedAgents: [],\n      selectedStatus: null,\n      statuses: [{\n        value: null,\n        text: 'All Statuses'\n      }, {\n        value: 'cancelled',\n        text: 'Cancelled'\n      }, {\n        value: 'upcoming',\n        text: 'Upcoming'\n      }, {\n        value: 'completed',\n        text: 'Completed'\n      }],\n      filterStartDate: '',\n      filterEndDate: '',\n      currentPage: 1,\n      itemsPerPage: 10,\n      searchQuery: ''\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.filteredRecords.length / this.itemsPerPage);\n    },\n    paginatedRecords() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredRecords.slice(start, end);\n    },\n    filteredRecords() {\n      let filtered = [...this.records];\n      if (this.selectedStatus && this.selectedStatus !== 'All Statuses') {\n        filtered = filtered.filter(record => record.fields.status === this.selectedStatus.toLowerCase());\n      }\n      if (this.selectedAgents.length > 0) {\n        filtered = filtered.filter(record => {\n          if (record.fields.agent_id) {\n            const recordAgentIds = record.fields.agent_id;\n            return this.selectedAgents.some(agent => recordAgentIds.includes(agent.id));\n          }\n        });\n      }\n      if (this.filterStartDate && this.filterEndDate) {\n        const startDate = new Date(this.filterStartDate);\n        const endDate = new Date(this.filterEndDate);\n        console.log(startDate, 'start date');\n        console.log(endDate, 'end date');\n        filtered = filtered.filter(record => {\n          const appointmentDate = new Date(record.fields.appointment_date);\n          console.log(appointmentDate, 'appointment date');\n          return appointmentDate >= startDate && appointmentDate <= endDate;\n        });\n      }\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase().trim();\n        filtered = filtered.filter(record => record.fields.appointment_address.toLowerCase().includes(query) || record.fields.contact_name[0].toLowerCase().includes(query) || record.fields.contact_phone[0].toString().includes(query) || record.fields.contact_email[0].toLowerCase().includes(query));\n      }\n      return filtered;\n    }\n  },\n  async created() {\n    await this.fetchAppointments();\n    await this.fetchAgents();\n    await this.fetchContacts();\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        this.records.forEach(record => {\n          const appointmentDate = new Date(record.fields.appointment_date);\n          const currentDate = new Date();\n          if (record.fields.is_cancelled) {\n            record.fields.status = 'cancelled';\n          } else if (appointmentDate > currentDate) {\n            record.fields.status = 'upcoming';\n          } else {\n            record.fields.status = 'completed';\n          }\n        });\n        this.records.sort((a, b) => new Date(b.fields.appointment_date) - new Date(a.fields.appointment_date));\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchContacts() {\n      const tableName = 'Contacts';\n      try {\n        this.contacts = await fetchContacts(tableName);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchRecords","fetchAgents","fetchContacts","AgentAvatar","AppointmentsListItem","DatePick","components","data","records","agents","contacts","selectedAgents","selectedStatus","statuses","value","text","filterStartDate","filterEndDate","currentPage","itemsPerPage","searchQuery","computed","totalPages","Math","ceil","filteredRecords","length","paginatedRecords","start","end","slice","filtered","filter","record","fields","status","toLowerCase","agent_id","recordAgentIds","some","agent","includes","id","startDate","Date","endDate","console","log","appointmentDate","appointment_date","query","trim","appointment_address","contact_name","contact_phone","toString","contact_email","created","fetchAppointments","methods","setSelectedAgent","push","setDeselectedAgent","index","indexOf","splice","tableName","forEach","currentDate","is_cancelled","sort","a","b","error"],"sources":["src/components/AppointmentsList.vue"],"sourcesContent":["<template>\n  <div class=\"mt-5 mb-5\">\n    <b-container fluid>\n      <div class=\"appointments-list\">\n        <div class=\"filter-area mb-3 mt-2\">\n          <b-row>\n            <b-col lg=\"2\">\n              <div class=\"avatar-container\">\n                <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                  <AgentAvatar :agent=\"agent\" @selectedAgent=\"setSelectedAgent\" @deselectedAgent=\"setDeselectedAgent\" />\n                </div>\n                <div v-if=\"agents.length > 5\" class=\"avatar-wrapper\">\n                  <b-avatar class=\"agent-avatar-item\" style=\"background-color: #ccc;\">\n                    +{{ agents.length - 5 }}\n                  </b-avatar>\n                </div>\n              </div>\n            </b-col>\n            <b-col lg=\"6\">\n              <b-row>\n                <b-col>\n                  <div class=\"status-select-box-area\">\n                    <b-form-select v-model=\"selectedStatus\" :options=\"statuses\"></b-form-select>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area position-relative\">\n                    <label for=\"filterStartDate\" class=\"form-label\">From</label>\n                    <date-pick v-model=\"filterStartDate\" :pickTime=\"true\" :format=\"'MM/DD/YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area position-relative\">\n                    <label for=\"filterStartDate\" class=\"form-label\">To</label>\n                    <date-pick v-model=\"filterEndDate\" :pickTime=\"true\" :format=\"'MM/DD/YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n              </b-row>\n            </b-col>\n            <b-col lg=\"4\">\n              <div class=\"d-flex justify-content-end search-input-area\">\n                <b-input-group class=\"w-75\">\n                  <b-form-input type=\"text\" v-model=\"searchQuery\" class=\"text-center\"\n                    placeholder=\"Search\"></b-form-input>\n                  <b-input-group-append>\n                    <b-button variant=\"dark\">\n                      <b-icon icon=\"search\" font-scale=\"0.9\"></b-icon>\n                    </b-button>\n                  </b-input-group-append>\n                </b-input-group>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        <div class=\"create-area pb-3\">\n          <b-row>\n            <b-col md=\"4\">\n              <b style=\"vertical-align:-webkit-baseline-middle\">{{ filteredRecords.length }} Appointments found.</b>\n            </b-col>\n            <b-col md=\"4\" offset-md=\"4\">\n              <div class=\"create-btn-area text-end\">\n                <b-button variant=\"primary\">\n                  <b-icon icon=\"plus-circle\" font-scale=\"1.1\" class=\"mx-1\"></b-icon> Create Appointment\n                </b-button>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        <div class=\"list-area mt-3 mb-3\" v-if=\"filteredRecords && filteredRecords.length > 0\">\n          <template v-for=\"(record, index) in paginatedRecords\">\n            <AppointmentsListItem :record=\"record\" :agents=\"agents\" :key=\"index\" :index=\"index\" />\n          </template>\n        </div>\n        <div class=\"text-center\" v-else>\n          No data found.\n        </div>\n        <!-- <b-pagination v-if=\"totalPages > 1\" v-model=\"currentPage\" :total-rows=\"filteredRecords.length\"\n          :per-page=\"itemsPerPage\" aria-controls=\"appointments-list\" class=\"mt-3\"></b-pagination> -->\n        <b-pagination v-if=\"totalPages > 1\" v-model=\"currentPage\" :total-rows=\"filteredRecords.length\"\n          :per-page=\"itemsPerPage\" :limit=\"totalPages\" aria-controls=\"appointments-list\" :first-number=\"false\"\n          :last-number=\"false\" class=\"mt-3\"></b-pagination>\n      </div>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport { fetchContacts } from '../services/contactService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport AppointmentsListItem from \"./AppointmentsListItem.vue\";\nimport DatePick from 'vue-date-pick';\n\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick,\n    AppointmentsListItem\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      contacts: [],\n      selectedAgents: [],\n      selectedStatus: null,\n      statuses: [\n        { value: null, text: 'All Statuses' },\n        { value: 'cancelled', text: 'Cancelled' },\n        { value: 'upcoming', text: 'Upcoming' },\n        { value: 'completed', text: 'Completed' },\n      ],\n      filterStartDate: '',\n      filterEndDate: '',\n      currentPage: 1,\n      itemsPerPage: 10,\n      searchQuery: ''\n    };\n  },\n\n  computed: {\n    totalPages() {\n      return Math.ceil(this.filteredRecords.length / this.itemsPerPage);\n    },\n    paginatedRecords() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredRecords.slice(start, end);\n    },\n    filteredRecords() {\n      let filtered = [...this.records];\n\n      if (this.selectedStatus && this.selectedStatus !== 'All Statuses') {\n        filtered = filtered.filter(record => record.fields.status === this.selectedStatus.toLowerCase());\n      }\n\n      if (this.selectedAgents.length > 0) {\n        filtered = filtered.filter(record => {\n          if (record.fields.agent_id) {\n            const recordAgentIds = record.fields.agent_id;\n            return this.selectedAgents.some(agent => recordAgentIds.includes(agent.id));\n          }\n        });\n      }\n      if (this.filterStartDate && this.filterEndDate) {\n        const startDate = new Date(this.filterStartDate);\n        const endDate = new Date(this.filterEndDate);\n        console.log(startDate, 'start date');\n        console.log(endDate, 'end date');\n        filtered = filtered.filter(record => {\n          const appointmentDate = new Date(record.fields.appointment_date);\n          console.log(appointmentDate, 'appointment date');\n          return appointmentDate >= startDate && appointmentDate <= endDate;\n        });\n      }\n      if (this.searchQuery) {\n        const query = this.searchQuery.toLowerCase().trim();\n        filtered = filtered.filter(record =>\n          record.fields.appointment_address.toLowerCase().includes(query) ||\n          record.fields.contact_name[0].toLowerCase().includes(query) ||\n          record.fields.contact_phone[0].toString().includes(query) ||\n          record.fields.contact_email[0].toLowerCase().includes(query)\n        );\n      }\n      return filtered;\n    },\n  },\n\n  async created() {\n    await this.fetchAppointments();\n    await this.fetchAgents();\n    await this.fetchContacts();\n  },\n\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n\n        this.records.forEach(record => {\n          const appointmentDate = new Date(record.fields.appointment_date);\n          const currentDate = new Date();\n\n          if (record.fields.is_cancelled) {\n            record.fields.status = 'cancelled';\n          } else if (appointmentDate > currentDate) {\n            record.fields.status = 'upcoming';\n          } else {\n            record.fields.status = 'completed';\n          }\n        });\n\n        this.records.sort((a, b) => new Date(b.fields.appointment_date) - new Date(a.fields.appointment_date));\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchContacts() {\n      const tableName = 'Contacts';\n      try {\n        this.contacts = await fetchContacts(tableName);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}