{"ast":null,"code":"import { extend, ValidationObserver, ValidationProvider, Validator } from 'vee-validate';\nimport { required } from 'vee-validate/dist/rules';\nimport ContactSearch from './ContactSearch';\nimport VueSelect from 'vue-select';\nimport 'flatpickr/dist/flatpickr.css';\nimport FlatPickr from 'vue-flatpickr-component';\nimport { createRecords } from '../services/appointmentsService';\n\n// Register rules globally\nextend('required', {\n  ...required,\n  message: 'This field is required'\n});\nexport default {\n  components: {\n    ContactSearch,\n    VueSelect,\n    flatPickr: FlatPickr,\n    ValidationObserver,\n    ValidationProvider\n  },\n  props: ['contacts', 'agents'],\n  data() {\n    return {\n      selectedContact: null,\n      appointmentAddress: '',\n      selectedAgent: [],\n      appointmentDate: '',\n      config: {\n        enableTime: true,\n        time_24hr: true,\n        dateFormat: 'Y-m-d H:i'\n      }\n    };\n  },\n  computed: {\n    agentList() {\n      return this.agents.map(agent => ({\n        id: agent.id,\n        label: `${agent.fields.agent_name} ${agent.fields.agent_surname}`\n      }));\n    }\n  },\n  methods: {\n    async submitAppointment() {\n      try {\n        const formattedDate = new Date(this.appointmentDate);\n        const newRecords = [{\n          appointment_date: formattedDate.toISOString(),\n          appointment_address: this.appointmentAddress,\n          contact_id: this.selectedContact ? [this.selectedContact.id] : [],\n          agent_id: this.selectedAgent.map(agent => agent.id),\n          is_cancelled: false // Assuming default value\n        }];\n        const response = await createRecords('Appointments', newRecords, true);\n        console.log('Records created:', response);\n        this.resetForm();\n        this.$bvModal.hide('new-appointment-modal');\n      } catch (error) {\n        console.error('Error creating appointment:', error);\n      }\n    },\n    resetForm() {\n      this.selectedContact = null;\n      this.appointmentAddress = '';\n      this.selectedAgent = [];\n      this.appointmentDate = '';\n    }\n  }\n};","map":{"version":3,"names":["extend","ValidationObserver","ValidationProvider","Validator","required","ContactSearch","VueSelect","FlatPickr","createRecords","message","components","flatPickr","props","data","selectedContact","appointmentAddress","selectedAgent","appointmentDate","config","enableTime","time_24hr","dateFormat","computed","agentList","agents","map","agent","id","label","fields","agent_name","agent_surname","methods","submitAppointment","formattedDate","Date","newRecords","appointment_date","toISOString","appointment_address","contact_id","agent_id","is_cancelled","response","console","log","resetForm","$bvModal","hide","error"],"sources":["src/components/NewAppointmentModal.vue"],"sourcesContent":["<template>\n    <div class=\"appointment-modal\">\n      <b-modal hide-backdrop id=\"new-appointment-modal\" hide-header-close header-class=\"d-block\"\n               content-class=\"grey-background\" static>\n        <template #modal-header=\"{}\">\n          <div class=\"text-center\">\n            <b-icon class=\"me-2\" icon=\"calendar-plus\" font-scale=\"1.1\"></b-icon>\n            <b>Create an Appointment</b>\n          </div>\n        </template>\n        <ValidationObserver v-slot=\"{ handleSubmit, invalid }\">\n          <form @submit.prevent=\"handleSubmit(submitAppointment)\">\n            <div class=\"search-contact-area\">\n              <ContactSearch :contacts=\"contacts\" @input=\"selectedContact = $event\" />\n              <span v-if=\"errors.has('selectedContact')\" class=\"text-danger\">{{ errors.first('selectedContact') }}</span>\n            </div>\n            <div class=\"appointment-address-input-area mt-3\">\n              <ValidationProvider name=\"appointmentAddress\" rules=\"required\" v-slot=\"{ errors }\">\n                <b-form-input type=\"text\" v-model=\"appointmentAddress\" placeholder=\"Address\"></b-form-input>\n                <span v-if=\"errors.length\" class=\"text-danger\">{{ errors[0] }}</span>\n              </ValidationProvider>\n            </div>\n            <div class=\"status-select-box-area mt-3\">\n              <ValidationProvider name=\"selectedAgent\" rules=\"required\" v-slot=\"{ errors }\">\n                <VueSelect multiple v-model=\"selectedAgent\" :options=\"agentList\" placeholder=\"Agent\" />\n                <span v-if=\"errors.length\" class=\"text-danger\">{{ errors[0] }}</span>\n              </ValidationProvider>\n            </div>\n            <div class=\"date-selector-area mt-3\">\n              <ValidationProvider name=\"appointmentDate\" rules=\"required\" v-slot=\"{ errors }\">\n                <flat-pickr v-model=\"appointmentDate\" :config=\"config\" class=\"form-control\"></flat-pickr>\n                <span v-if=\"errors.length\" class=\"text-danger\">{{ errors[0] }}</span>\n              </ValidationProvider>\n            </div>\n            <div class=\"submit-button-area mt-3 text-center\">\n              <b-button variant=\"primary\" type=\"submit\" :disabled=\"invalid\">Submit</b-button>\n            </div>\n          </form>\n        </ValidationObserver>\n      </b-modal>\n    </div>\n  </template>\n  \n  <script>\n  import { extend, ValidationObserver, ValidationProvider, Validator } from 'vee-validate';\n  import { required } from 'vee-validate/dist/rules';\n  import ContactSearch from './ContactSearch';\n  import VueSelect from 'vue-select';\n  import 'flatpickr/dist/flatpickr.css';\n  import FlatPickr from 'vue-flatpickr-component';\n  import { createRecords } from '../services/appointmentsService';\n  \n  // Register rules globally\n  extend('required', {\n    ...required,\n    message: 'This field is required'\n  });\n  \n  export default {\n    components: {\n      ContactSearch,\n      VueSelect,\n      flatPickr: FlatPickr,\n      ValidationObserver,\n      ValidationProvider\n    },\n    props: ['contacts', 'agents'],\n    data() {\n      return {\n        selectedContact: null,\n        appointmentAddress: '',\n        selectedAgent: [],\n        appointmentDate: '',\n        config: {\n          enableTime: true,\n          time_24hr: true,\n          dateFormat: 'Y-m-d H:i'\n        }\n      };\n    },\n    computed: {\n      agentList() {\n        return this.agents.map(agent => ({\n          id: agent.id,\n          label: `${agent.fields.agent_name} ${agent.fields.agent_surname}`\n        }));\n      }\n    },\n    methods: {\n      async submitAppointment() {\n        try {\n          const formattedDate = new Date(this.appointmentDate);\n          const newRecords = [\n            {\n              appointment_date: formattedDate.toISOString(),\n              appointment_address: this.appointmentAddress,\n              contact_id: this.selectedContact ? [this.selectedContact.id] : [],\n              agent_id: this.selectedAgent.map(agent => agent.id),\n              is_cancelled: false // Assuming default value\n            }\n          ];\n          const response = await createRecords('Appointments', newRecords, true);\n          console.log('Records created:', response);\n          this.resetForm();\n          this.$bvModal.hide('new-appointment-modal');\n        } catch (error) {\n          console.error('Error creating appointment:', error);\n        }\n      },\n      resetForm() {\n        this.selectedContact = null;\n        this.appointmentAddress = '';\n        this.selectedAgent = [];\n        this.appointmentDate = '';\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .grey-background {\n    background-color: #f8f9fa;\n  }\n  .text-danger {\n    color: #dc3545;\n  }\n  </style>\n  "],"mappings":"AA4CA,SAAAA,MAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAAC,SAAA;AACA,SAAAC,QAAA;AACA,OAAAC,aAAA;AACA,OAAAC,SAAA;AACA;AACA,OAAAC,SAAA;AACA,SAAAC,aAAA;;AAEA;AACAR,MAAA;EACA,GAAAI,QAAA;EACAK,OAAA;AACA;AAEA;EACAC,UAAA;IACAL,aAAA;IACAC,SAAA;IACAK,SAAA,EAAAJ,SAAA;IACAN,kBAAA;IACAC;EACA;EACAU,KAAA;EACAC,KAAA;IACA;MACAC,eAAA;MACAC,kBAAA;MACAC,aAAA;MACAC,eAAA;MACAC,MAAA;QACAC,UAAA;QACAC,SAAA;QACAC,UAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,UAAA;MACA,YAAAC,MAAA,CAAAC,GAAA,CAAAC,KAAA;QACAC,EAAA,EAAAD,KAAA,CAAAC,EAAA;QACAC,KAAA,KAAAF,KAAA,CAAAG,MAAA,CAAAC,UAAA,IAAAJ,KAAA,CAAAG,MAAA,CAAAE,aAAA;MACA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,kBAAA;MACA;QACA,MAAAC,aAAA,OAAAC,IAAA,MAAAlB,eAAA;QACA,MAAAmB,UAAA,IACA;UACAC,gBAAA,EAAAH,aAAA,CAAAI,WAAA;UACAC,mBAAA,OAAAxB,kBAAA;UACAyB,UAAA,OAAA1B,eAAA,SAAAA,eAAA,CAAAa,EAAA;UACAc,QAAA,OAAAzB,aAAA,CAAAS,GAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAC,EAAA;UACAe,YAAA;QACA,EACA;QACA,MAAAC,QAAA,SAAAnC,aAAA,iBAAA4B,UAAA;QACAQ,OAAA,CAAAC,GAAA,qBAAAF,QAAA;QACA,KAAAG,SAAA;QACA,KAAAC,QAAA,CAAAC,IAAA;MACA,SAAAC,KAAA;QACAL,OAAA,CAAAK,KAAA,gCAAAA,KAAA;MACA;IACA;IACAH,UAAA;MACA,KAAAhC,eAAA;MACA,KAAAC,kBAAA;MACA,KAAAC,aAAA;MACA,KAAAC,eAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}