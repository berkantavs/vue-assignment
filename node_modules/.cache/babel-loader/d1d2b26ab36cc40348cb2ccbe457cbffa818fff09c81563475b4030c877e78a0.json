{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchRecords, addRecord } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nexport default {\n  components: {\n    AgentAvatar\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      currentPage: 1,\n      itemsPerPage: 10,\n      test: false\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n  async created() {\n    this.fetchAppointments();\n    this.fetchAgents();\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      console.log(agent.fields.agent_name);\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        console.log(this.records);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n        console.log(this.agents);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async addNewRecord() {\n      const tableName = 'tbl9reEf5STrkSA85';\n      const fields = {\n        Name: 'New Record'\n      };\n      try {\n        const newRecord = await addRecord(tableName, fields);\n        this.records.push(newRecord);\n      } catch (error) {\n        console.error('Error adding record:', error);\n      }\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchRecords","addRecord","fetchAgents","AgentAvatar","components","data","records","agents","currentPage","itemsPerPage","test","computed","totalPages","Math","ceil","length","paginatedData","start","end","slice","created","fetchAppointments","methods","setSelectedAgent","agent","console","log","fields","agent_name","tableName","error","addNewRecord","Name","newRecord","push","formatDate","dateStr","date","Date","toLocaleDateString","toLocaleTimeString","prevPage","nextPage"],"sources":["src/components/AppointmentsList.vue"],"sourcesContent":["<template>\n  <div class=\"mt-5 mb-5\">\n    <b-container>\n      <div class=\"appointments-list\">\n        <div class=\"filter-area mb-3 mt-2\">\n          <b-row>\n            <b-col lg=\"2\">\n              <div class=\"avatar-container\">\n                <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                  <AgentAvatar :agent=\"agent\"  @selectedAgent=\"setSelectedAgent(agent)\"/>\n                </div>\n                <div v-if=\"agents.length > 5\" class=\"avatar-wrapper\">\n                  <b-avatar class=\"agent-avatar-item\" style=\"background-color: #ccc;\">\n                    +{{ agents.length - 5 }}\n                  </b-avatar>\n                </div>\n              </div>\n            </b-col>\n            <b-col lg=\"6\">\n              status select box\n              baslangÄ±c\n              bitis tarihleri\n            </b-col>\n            <b-col lg=\"4\">\n              <div class=\"text-end\">\n                search input\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n      </div>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { fetchRecords, addRecord } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\"\nexport default {\n  components: {\n    AgentAvatar\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      currentPage: 1,\n      itemsPerPage: 10,\n      test: false\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n  async created() {\n    this.fetchAppointments();\n    this.fetchAgents()\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      console.log(agent.fields.agent_name);\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        console.log(this.records);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n        console.log(this.agents);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async addNewRecord() {\n      const tableName = 'tbl9reEf5STrkSA85';\n      const fields = { Name: 'New Record' };\n      try {\n        const newRecord = await addRecord(tableName, fields);\n        this.records.push(newRecord);\n      } catch (error) {\n        console.error('Error adding record:', error);\n      }\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    }\n  }\n};\n</script>\n"],"mappings":";AAoCA,SAAAA,YAAA,EAAAC,SAAA;AACA,SAAAC,WAAA;AACA,OAAAC,WAAA;AACA;EACAC,UAAA;IACAD;EACA;EACAE,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;MACAC,WAAA;MACAC,YAAA;MACAC,IAAA;IACA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,OAAAC,IAAA,CAAAC,IAAA,MAAAR,OAAA,CAAAS,MAAA,QAAAN,YAAA;IACA;IACAO,cAAA;MACA,MAAAC,KAAA,SAAAT,WAAA,aAAAC,YAAA;MACA,MAAAS,GAAA,GAAAD,KAAA,QAAAR,YAAA;MACA,YAAAH,OAAA,CAAAa,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;EACA;EACA,MAAAE,QAAA;IACA,KAAAC,iBAAA;IACA,KAAAnB,WAAA;EACA;EACAoB,OAAA;IACAC,iBAAAC,KAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,KAAA,CAAAG,MAAA,CAAAC,UAAA;IACA;IACA,MAAAP,kBAAA;MACA,MAAAQ,SAAA;MACA;QACA,KAAAvB,OAAA,SAAAN,YAAA,CAAA6B,SAAA;QACAJ,OAAA,CAAAC,GAAA,MAAApB,OAAA;MAEA,SAAAwB,KAAA;QACAL,OAAA,CAAAK,KAAA,yBAAAA,KAAA;MACA;IACA;IACA,MAAA5B,YAAA;MACA,MAAA2B,SAAA;MACA;QACA,KAAAtB,MAAA,SAAAL,WAAA,CAAA2B,SAAA;QACAJ,OAAA,CAAAC,GAAA,MAAAnB,MAAA;MAEA,SAAAuB,KAAA;QACAL,OAAA,CAAAK,KAAA,yBAAAA,KAAA;MACA;IACA;IACA,MAAAC,aAAA;MACA,MAAAF,SAAA;MACA,MAAAF,MAAA;QAAAK,IAAA;MAAA;MACA;QACA,MAAAC,SAAA,SAAAhC,SAAA,CAAA4B,SAAA,EAAAF,MAAA;QACA,KAAArB,OAAA,CAAA4B,IAAA,CAAAD,SAAA;MACA,SAAAH,KAAA;QACAL,OAAA,CAAAK,KAAA,yBAAAA,KAAA;MACA;IACA;IACAK,WAAAC,OAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,OAAA;MACA,OAAAC,IAAA,CAAAE,kBAAA,WAAAF,IAAA,CAAAG,kBAAA;IACA;IACAC,SAAA;MACA,SAAAjC,WAAA;QACA,KAAAA,WAAA;MACA;IACA;IACAkC,SAAA;MACA,SAAAlC,WAAA,QAAAI,UAAA;QACA,KAAAJ,WAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}