{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport AppointmentsListItem from \"./AppointmentsListItem.vue\";\nimport DatePick from 'vue-date-pick';\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick,\n    AppointmentsListItem\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      selectedAgents: [],\n      selectedStatus: null,\n      statuses: [{\n        value: null,\n        text: 'All Statutes'\n      }, {\n        value: 'cancelled',\n        text: 'Cancelled'\n      }, {\n        value: 'upcoming',\n        text: 'Upcoming'\n      }, {\n        value: 'completed',\n        text: 'Completed'\n      }],\n      filterStartDate: '',\n      filterEndDate: '',\n      currentPage: 1,\n      itemsPerPage: 10\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedRecords() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n  async created() {\n    this.fetchAppointments();\n    this.fetchAgents();\n    let response = mergeAppointmentsWithAgents(this.records, this.agents);\n    console.log(response);\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        console.log(this.records);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n        console.log(this.agents);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    mergeAppointmentsWithAgents(appointmentsData, agentsData) {\n      // Appointments API'sinden agent ID al\n      const appointmentAgentId = appointmentsData.fields.agent_id[0];\n\n      // Agents API'sinden ilgili agenti bul\n      const matchedAgent = agentsData.fields.appointments.find(appointmentId => appointmentId === appointmentsData.id);\n\n      // Eşleşme varsa, veriyi birleştir ve döndür\n      if (matchedAgent) {\n        return {\n          appointmentId: appointmentsData.id,\n          appointmentDate: appointmentsData.fields.appointment_date,\n          agentName: agentsData.fields.agent_name,\n          agentSurname: agentsData.fields.agent_surname\n        };\n      } else {\n        return null; // Eşleşme bulunamazsa null döndür\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchRecords","fetchAgents","AgentAvatar","AppointmentsListItem","DatePick","components","data","records","agents","selectedAgents","selectedStatus","statuses","value","text","filterStartDate","filterEndDate","currentPage","itemsPerPage","computed","totalPages","Math","ceil","length","paginatedRecords","start","end","slice","created","fetchAppointments","response","mergeAppointmentsWithAgents","console","log","methods","setSelectedAgent","agent","includes","push","setDeselectedAgent","index","indexOf","splice","tableName","error","appointmentsData","agentsData","appointmentAgentId","fields","agent_id","matchedAgent","appointments","find","appointmentId","id","appointmentDate","appointment_date","agentName","agent_name","agentSurname","agent_surname"],"sources":["src/components/AppointmentsList.vue"],"sourcesContent":["<template>\n  <div class=\"mt-5 mb-5\">\n    <b-container>\n      <div class=\"appointments-list\">\n        <div class=\"filter-area mb-3 mt-2\">\n          <b-row>\n            <b-col lg=\"2\">\n              <div class=\"avatar-container\">\n                <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                  <AgentAvatar :agent=\"agent\" @selectedAgent=\"setSelectedAgent\" @deselectedAgent=\"setDeselectedAgent\" />\n                </div>\n                <div v-if=\"agents.length > 5\" class=\"avatar-wrapper\">\n                  <b-avatar class=\"agent-avatar-item\" style=\"background-color: #ccc;\">\n                    +{{ agents.length - 5 }}\n                  </b-avatar>\n                </div>\n              </div>\n            </b-col>\n            <b-col lg=\"6\">\n              <b-row>\n                <b-col>\n                  <div class=\"status-select-box-area\">\n                    <b-form-select v-model=\"selectedStatus\" :options=\"statuses\"></b-form-select>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area\">\n                    <date-pick v-model=\"filterStartDate\" :pickTime=\"true\" :format=\"'DD-MM-YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area\">\n                    <date-pick v-model=\"filterEndDate\" :pickTime=\"true\" :format=\"'DD-MM-YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n              </b-row>\n            </b-col>\n            <b-col lg=\"4\">\n              <div class=\"d-flex justify-content-end search-input-area\">\n                <b-input-group class=\"w-75\">\n                  <b-form-input type=\"text\" class=\"text-center\" placeholder=\"Search\"></b-form-input>\n                  <b-input-group-append>\n                    <b-button variant=\"dark\">\n                      <b-icon icon=\"search\" font-scale=\"0.9\"></b-icon>\n                    </b-button>\n                  </b-input-group-append>\n                </b-input-group>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        <div class=\"create-area pb-3\">\n          <b-row>\n            <b-col md=\"4\">\n              <b style=\"vertical-align:-webkit-baseline-middle\">{{ records.length }} Appointments found.</b>\n            </b-col>\n            <b-col md=\"4\" offset-md=\"4\">\n              <div class=\"create-btn-area text-end\">\n                <b-button variant=\"primary\">\n                  <b-icon icon=\"plus-circle\" font-scale=\"1.1\" class=\"mx-1\"></b-icon> Create Appointment\n                </b-button>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        <div class=\"list-area mt-3 mb-3\" v-if=\"paginatedRecords && paginatedRecords.length > 0\">\n          <template v-for=\"(record, index) in paginatedRecords\">\n            <AppointmentsListItem :record=\"record\" :key=\"index\" :index=\"index\" />\n          </template>\n        </div>\n        <div class=\"text-center\" v-else>\n          No data found.\n        </div>\n        <b-pagination v-if=\"totalPages > 1\" v-model=\"currentPage\" :total-rows=\"records.length\" :per-page=\"itemsPerPage\"\n          aria-controls=\"appointments-list\" class=\"mt-3\"></b-pagination>\n      </div>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport AppointmentsListItem from \"./AppointmentsListItem.vue\";\nimport DatePick from 'vue-date-pick';\n\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick,\n    AppointmentsListItem\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      selectedAgents: [],\n      selectedStatus: null,\n      statuses: [\n        { value: null, text: 'All Statutes' },\n        { value: 'cancelled', text: 'Cancelled' },\n        { value: 'upcoming', text: 'Upcoming' },\n        { value: 'completed', text: 'Completed' },\n      ],\n      filterStartDate: '',\n      filterEndDate: '',\n      currentPage: 1,\n      itemsPerPage: 10\n    };\n  },\n\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedRecords() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n\n  async created() {\n    this.fetchAppointments();\n    this.fetchAgents();\n    let response = mergeAppointmentsWithAgents(this.records, this.agents)\n    console.log(response);\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        console.log(this.records);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n        console.log(this.agents);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    mergeAppointmentsWithAgents(appointmentsData, agentsData) {\n      // Appointments API'sinden agent ID al\n      const appointmentAgentId = appointmentsData.fields.agent_id[0];\n\n      // Agents API'sinden ilgili agenti bul\n      const matchedAgent = agentsData.fields.appointments.find(appointmentId => appointmentId === appointmentsData.id);\n\n      // Eşleşme varsa, veriyi birleştir ve döndür\n      if (matchedAgent) {\n        return {\n          appointmentId: appointmentsData.id,\n          appointmentDate: appointmentsData.fields.appointment_date,\n          agentName: agentsData.fields.agent_name,\n          agentSurname: agentsData.fields.agent_surname\n        };\n      } else {\n        return null; // Eşleşme bulunamazsa null döndür\n      }\n    }\n  }\n};\n</script>\n"],"mappings":";AAiFA,SAAAA,YAAA;AACA,SAAAC,WAAA;AACA,OAAAC,WAAA;AACA,OAAAC,oBAAA;AACA,OAAAC,QAAA;AAEA;EACAC,UAAA;IACAH,WAAA;IACAE,QAAA;IACAD;EACA;EACAG,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;MACAC,cAAA;MACAC,cAAA;MACAC,QAAA,GACA;QAAAC,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,EACA;MACAC,eAAA;MACAC,aAAA;MACAC,WAAA;MACAC,YAAA;IACA;EACA;EAEAC,QAAA;IACAC,WAAA;MACA,OAAAC,IAAA,CAAAC,IAAA,MAAAd,OAAA,CAAAe,MAAA,QAAAL,YAAA;IACA;IACAM,iBAAA;MACA,MAAAC,KAAA,SAAAR,WAAA,aAAAC,YAAA;MACA,MAAAQ,GAAA,GAAAD,KAAA,QAAAP,YAAA;MACA,YAAAV,OAAA,CAAAmB,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;EACA;EAEA,MAAAE,QAAA;IACA,KAAAC,iBAAA;IACA,KAAA3B,WAAA;IACA,IAAA4B,QAAA,GAAAC,2BAAA,MAAAvB,OAAA,OAAAC,MAAA;IACAuB,OAAA,CAAAC,GAAA,CAAAH,QAAA;EACA;EACAI,OAAA;IACAC,iBAAAC,KAAA;MACA,UAAA1B,cAAA,CAAA2B,QAAA,CAAAD,KAAA;QACA,KAAA1B,cAAA,CAAA4B,IAAA,CAAAF,KAAA;MACA;IACA;IACAG,mBAAAH,KAAA;MACA,MAAAI,KAAA,QAAA9B,cAAA,CAAA+B,OAAA,CAAAL,KAAA;MACA,IAAAI,KAAA;QACA,KAAA9B,cAAA,CAAAgC,MAAA,CAAAF,KAAA;MACA;IACA;IACA,MAAAX,kBAAA;MACA,MAAAc,SAAA;MACA;QACA,KAAAnC,OAAA,SAAAP,YAAA,CAAA0C,SAAA;QACAX,OAAA,CAAAC,GAAA,MAAAzB,OAAA;MAEA,SAAAoC,KAAA;QACAZ,OAAA,CAAAY,KAAA,yBAAAA,KAAA;MACA;IACA;IACA,MAAA1C,YAAA;MACA,MAAAyC,SAAA;MACA;QACA,KAAAlC,MAAA,SAAAP,WAAA,CAAAyC,SAAA;QACAX,OAAA,CAAAC,GAAA,MAAAxB,MAAA;MAEA,SAAAmC,KAAA;QACAZ,OAAA,CAAAY,KAAA,yBAAAA,KAAA;MACA;IACA;IACAb,4BAAAc,gBAAA,EAAAC,UAAA;MACA;MACA,MAAAC,kBAAA,GAAAF,gBAAA,CAAAG,MAAA,CAAAC,QAAA;;MAEA;MACA,MAAAC,YAAA,GAAAJ,UAAA,CAAAE,MAAA,CAAAG,YAAA,CAAAC,IAAA,CAAAC,aAAA,IAAAA,aAAA,KAAAR,gBAAA,CAAAS,EAAA;;MAEA;MACA,IAAAJ,YAAA;QACA;UACAG,aAAA,EAAAR,gBAAA,CAAAS,EAAA;UACAC,eAAA,EAAAV,gBAAA,CAAAG,MAAA,CAAAQ,gBAAA;UACAC,SAAA,EAAAX,UAAA,CAAAE,MAAA,CAAAU,UAAA;UACAC,YAAA,EAAAb,UAAA,CAAAE,MAAA,CAAAY;QACA;MACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}