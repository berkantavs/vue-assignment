{"ast":null,"code":"import ContactSearch from './ContactSearch';\nimport VueSelect from 'vue-select';\nimport 'flatpickr/dist/flatpickr.css';\nimport FlatPickr from 'vue-flatpickr-component';\nexport default {\n  props: ['record', \"contacts\", \"agents\"],\n  components: {\n    ContactSearch,\n    VueSelect,\n    flatPickr: FlatPickr\n  },\n  data() {\n    return {\n      selectedContact: null,\n      appointmentAddress: null,\n      selectedAgent: [],\n      appointmentDate: '',\n      selectedContactId: null,\n      config: {\n        enableTime: true,\n        time_24hr: true\n      }\n    };\n  },\n  mounted() {\n    this.initializeEditForm();\n  },\n  watch: {\n    contacts: 'initializeEditForm',\n    'record.fields.contact_id': 'initializeEditForm'\n  },\n  computed: {\n    agentList() {\n      return this.agents.map(agent => ({\n        id: agent.id,\n        label: `${agent.fields.agent_name} ${agent.fields.agent_surname}`\n      }));\n    }\n  },\n  methods: {\n    initializeEditForm() {\n      if (this.contacts && this.record.fields.contact_id) {\n        const contact = this.contacts.find(contact => contact.id === this.record.fields.contact_id[0]);\n        if (contact) {\n          this.selectedContact = contact;\n        }\n      }\n      if (this.record.fields.appointment_address) {\n        this.appointmentAddress = this.record.fields.appointment_address;\n      }\n      if (this.record.fields.agent_id) {\n        this.selectedAgent = this.record.fields.agent_id.map((id, index) => ({\n          id: id,\n          label: `${this.record.fields.agent_name[index]} ${this.record.fields.agent_surname[index]}`\n        }));\n      }\n    },\n    setContact(contact) {\n      this.selectedContact = contact;\n    },\n    async submitAppointment() {\n      console.log('Appointment Data:', {\n        contact: this.selectedContact,\n        address: this.appointmentAddress,\n        agents: this.selectedAgent,\n        date: this.appointmentDate\n      });\n    }\n  }\n};","map":{"version":3,"names":["ContactSearch","VueSelect","FlatPickr","props","components","flatPickr","data","selectedContact","appointmentAddress","selectedAgent","appointmentDate","selectedContactId","config","enableTime","time_24hr","mounted","initializeEditForm","watch","contacts","computed","agentList","agents","map","agent","id","label","fields","agent_name","agent_surname","methods","record","contact_id","contact","find","appointment_address","agent_id","index","setContact","submitAppointment","console","log","address","date"],"sources":["src/components/EditAppointmentModal.vue"],"sourcesContent":["<template>\n    <div class=\"appointment-modal\">\n        <b-modal hide-backdrop :id=\"'appointment-modal-' + record.id\" hide-header-close header-class=\"d-block\"\n            content-class=\"grey-background\">\n            <template #modal-header=\"{}\">\n                <div class=\"text-center\">\n                    <b-icon class=\"me-2\" icon=\"calendar-plus\" font-scale=\"1.1\"></b-icon>\n                </div>\n            </template>\n            <div class=\"search-contact-area\">\n                <ContactSearch :contacts=\"contacts\" @setContact=\"setContact\" :selectedContactInfo=\"selectedContact\"\n                    :formType=\"'edit'\" />\n            </div>\n            <div class=\"appointment-address-input-area mt-3\">\n                <b-form-input type=\"text\" v-model=\"appointmentAddress\" placeholder=\"Address\"></b-form-input>\n            </div>\n            <div class=\"status-select-box-area mt-3\">\n                <VueSelect multiple v-model=\"selectedAgent\" :options=\"agentList\" placeholder=\"Agent\" />\n            </div>\n            <div class=\"date-selector-area mt-3\">\n                <flat-pickr :model-value=\"appointmentDate\" :config=\"config\"\n                    @update:modelValue=\"appointmentDate = $event\" class=\"form-control\"></flat-pickr>\n            </div>\n            <div class=\"submit-button-area mt-3 text-end\">\n                <b-button variant=\"primary\" @click=\"submitAppointment\">Submit</b-button>\n            </div>\n        </b-modal>\n    </div>\n</template>\n\n<script>\nimport ContactSearch from './ContactSearch';\nimport VueSelect from 'vue-select';\nimport 'flatpickr/dist/flatpickr.css';\nimport FlatPickr from 'vue-flatpickr-component';\n\nexport default {\n    props: ['record', \"contacts\", \"agents\"],\n    components: {\n        ContactSearch,\n        VueSelect,\n        flatPickr: FlatPickr,\n    },\n    data() {\n        return {\n            selectedContact: null,\n            appointmentAddress: null,\n            selectedAgent: [],\n            appointmentDate: '',\n            selectedContactId: null,\n            config: {\n                enableTime: true,\n                time_24hr: true,\n            },\n        };\n    },\n    mounted() {\n        this.initializeEditForm();\n    },\n    watch: {\n        contacts: 'initializeEditForm',\n        'record.fields.contact_id': 'initializeEditForm',\n    },\n    computed: {\n        agentList() {\n            return this.agents.map(agent => ({\n                id: agent.id,\n                label: `${agent.fields.agent_name} ${agent.fields.agent_surname}`,\n            }));\n        },\n    },\n    methods: {\n        initializeEditForm() {\n            if (this.contacts && this.record.fields.contact_id) {\n                const contact = this.contacts.find(contact => contact.id === this.record.fields.contact_id[0]);\n                if (contact) {\n                    this.selectedContact = contact;\n                }\n            }\n            if (this.record.fields.appointment_address) {\n                this.appointmentAddress = this.record.fields.appointment_address;\n            }\n            if (this.record.fields.agent_id) {\n                this.selectedAgent = this.record.fields.agent_id.map((id, index) => ({\n                    id: id,\n                    label: `${this.record.fields.agent_name[index]} ${this.record.fields.agent_surname[index]}`,\n                }));\n            }\n        },\n        setContact(contact) {\n            this.selectedContact = contact;\n        },\n        async submitAppointment() {\n            console.log('Appointment Data:', {\n                contact: this.selectedContact,\n                address: this.appointmentAddress,\n                agents: this.selectedAgent,\n                date: this.appointmentDate,\n            });\n        },\n    }\n};\n</script>\n"],"mappings":"AA+BA,OAAAA,aAAA;AACA,OAAAC,SAAA;AACA;AACA,OAAAC,SAAA;AAEA;EACAC,KAAA;EACAC,UAAA;IACAJ,aAAA;IACAC,SAAA;IACAI,SAAA,EAAAH;EACA;EACAI,KAAA;IACA;MACAC,eAAA;MACAC,kBAAA;MACAC,aAAA;MACAC,eAAA;MACAC,iBAAA;MACAC,MAAA;QACAC,UAAA;QACAC,SAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,kBAAA;EACA;EACAC,KAAA;IACAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,UAAA;MACA,YAAAC,MAAA,CAAAC,GAAA,CAAAC,KAAA;QACAC,EAAA,EAAAD,KAAA,CAAAC,EAAA;QACAC,KAAA,KAAAF,KAAA,CAAAG,MAAA,CAAAC,UAAA,IAAAJ,KAAA,CAAAG,MAAA,CAAAE,aAAA;MACA;IACA;EACA;EACAC,OAAA;IACAb,mBAAA;MACA,SAAAE,QAAA,SAAAY,MAAA,CAAAJ,MAAA,CAAAK,UAAA;QACA,MAAAC,OAAA,QAAAd,QAAA,CAAAe,IAAA,CAAAD,OAAA,IAAAA,OAAA,CAAAR,EAAA,UAAAM,MAAA,CAAAJ,MAAA,CAAAK,UAAA;QACA,IAAAC,OAAA;UACA,KAAAzB,eAAA,GAAAyB,OAAA;QACA;MACA;MACA,SAAAF,MAAA,CAAAJ,MAAA,CAAAQ,mBAAA;QACA,KAAA1B,kBAAA,QAAAsB,MAAA,CAAAJ,MAAA,CAAAQ,mBAAA;MACA;MACA,SAAAJ,MAAA,CAAAJ,MAAA,CAAAS,QAAA;QACA,KAAA1B,aAAA,QAAAqB,MAAA,CAAAJ,MAAA,CAAAS,QAAA,CAAAb,GAAA,EAAAE,EAAA,EAAAY,KAAA;UACAZ,EAAA,EAAAA,EAAA;UACAC,KAAA,UAAAK,MAAA,CAAAJ,MAAA,CAAAC,UAAA,CAAAS,KAAA,UAAAN,MAAA,CAAAJ,MAAA,CAAAE,aAAA,CAAAQ,KAAA;QACA;MACA;IACA;IACAC,WAAAL,OAAA;MACA,KAAAzB,eAAA,GAAAyB,OAAA;IACA;IACA,MAAAM,kBAAA;MACAC,OAAA,CAAAC,GAAA;QACAR,OAAA,OAAAzB,eAAA;QACAkC,OAAA,OAAAjC,kBAAA;QACAa,MAAA,OAAAZ,aAAA;QACAiC,IAAA,OAAAhC;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}