{"ast":null,"code":"import ContactSearch from './ContactSearch';\nimport VueSelect from 'vue-select';\nimport 'flatpickr/dist/flatpickr.css';\nimport FlatPickr from 'vue-flatpickr-component';\nimport { updateRecords } from '../services/appointmentsService';\nexport default {\n  props: [\"allRecords\", 'record', \"contacts\", \"agents\"],\n  components: {\n    ContactSearch,\n    VueSelect,\n    flatPickr: FlatPickr\n  },\n  data() {\n    return {\n      selectedContact: null,\n      appointmentAddress: null,\n      selectedAgent: [],\n      appointmentDate: '',\n      selectedContactId: null,\n      config: {\n        enableTime: true,\n        time_24hr: true\n      },\n      recordStatus: '',\n      recordStatusColor: '',\n      recordRemainingText: ''\n    };\n  },\n  mounted() {\n    this.initializeEditForm();\n  },\n  watch: {\n    contacts: 'initializeEditForm',\n    relatedAppointments: {\n      immediate: true,\n      handler(newValue, oldValue) {\n        if (newValue !== oldValue) {\n          this.calculatePositiveHoursAndDays();\n        }\n      }\n    }\n  },\n  computed: {\n    agentList() {\n      return this.agents.map(agent => ({\n        id: agent.id,\n        label: `${agent.fields.agent_name} ${agent.fields.agent_surname}`\n      }));\n    },\n    relatedAppointments() {\n      return this.allRecords.filter(appointment => this.selectedContact?.fields.appointments.includes(appointment.id));\n    }\n  },\n  methods: {\n    calculatePositiveHoursAndDays() {\n      for (let i = 0; i < this.relatedAppointments.length; i++) {\n        const start = new Date();\n        const end = new Date(this.relatedAppointments[i]?.fields?.appointment_date);\n        let difference = end - start;\n        const millisecondsPerSecond = 1000;\n        const secondsPerMinute = 60;\n        const minutesPerHour = 60;\n        const hoursPerDay = 24;\n        let milliseconds = difference % millisecondsPerSecond;\n        difference = (difference - milliseconds) / millisecondsPerSecond;\n        let seconds = difference % secondsPerMinute;\n        difference = (difference - seconds) / secondsPerMinute;\n        let minutes = difference % minutesPerHour;\n        difference = (difference - minutes) / minutesPerHour;\n        let hours = difference % hoursPerDay;\n        let days = (difference - hours) / hoursPerDay;\n        days = Math.max(0, days);\n        hours = Math.max(0, hours);\n        if (days > 0) {\n          this.recordRemainingText = `${days} days`;\n        } else if (days <= 0 && hours > 0) {\n          this.recordRemainingText = `${hours} hours`;\n        }\n        const now = new Date();\n        if (this.relatedAppointments[i]?.fields?.is_cancelled) {\n          this.recordStatus = 'Cancelled';\n          this.recordStatusColor = '#ff0000';\n          this.recordRemainingText = '';\n          return;\n        } else if (end > now) {\n          this.recordStatus = 'Upcoming';\n          this.recordStatusColor = '#ffa500';\n          return;\n        } else {\n          this.recordStatus = 'Completed';\n          this.recordStatusColor = '#008000';\n          this.recordRemainingText = '';\n        }\n      }\n    },\n    formatAppointmentDate(dateString) {\n      const date = new Date(dateString);\n      const day = String(date.getUTCDate()).padStart(2, '0');\n      const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n      const year = date.getUTCFullYear();\n      const hours = String(date.getUTCHours()).padStart(2, '0');\n      const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n      return `${day}/${month}/${year} ${hours}:${minutes}`;\n    },\n    initializeEditForm() {\n      if (this.contacts && this.record.fields.contact_id) {\n        const contact = this.contacts.find(contact => contact.id === this.record.fields.contact_id[0]);\n        console.log(contact);\n        if (contact) {\n          this.selectedContact = contact;\n        }\n      }\n      if (this.record.fields.appointment_address) {\n        this.appointmentAddress = this.record.fields.appointment_address;\n      }\n      if (this.record.fields.agent_id) {\n        this.selectedAgent = this.record.fields.agent_id.map((id, index) => ({\n          id: id,\n          label: `${this.record.fields.agent_name[index]} ${this.record.fields.agent_surname[index]}`\n        }));\n      }\n      if (this.record.fields.appointment_date) {\n        this.appointmentDate = this.record.fields.appointment_date;\n      }\n    },\n    setContact(contact) {\n      this.selectedContact = contact;\n    },\n    async submitAppointment() {\n      const updatedAppointment = {\n        id: this.record.id,\n        fields: {\n          appointment_date: this.appointmentDate,\n          appointment_address: this.appointmentAddress,\n          contact_id: [this.selectedContact.id],\n          agent_id: this.selectedAgent.map(agent => agent.id)\n        }\n      };\n      try {\n        const response = await updateRecords('Appointments', [updatedAppointment]);\n        console.log('Appointment updated:', response);\n      } catch (error) {\n        console.error('Error updating appointment:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["ContactSearch","VueSelect","FlatPickr","updateRecords","props","components","flatPickr","data","selectedContact","appointmentAddress","selectedAgent","appointmentDate","selectedContactId","config","enableTime","time_24hr","recordStatus","recordStatusColor","recordRemainingText","mounted","initializeEditForm","watch","contacts","relatedAppointments","immediate","handler","newValue","oldValue","calculatePositiveHoursAndDays","computed","agentList","agents","map","agent","id","label","fields","agent_name","agent_surname","allRecords","filter","appointment","appointments","includes","methods","i","length","start","Date","end","appointment_date","difference","millisecondsPerSecond","secondsPerMinute","minutesPerHour","hoursPerDay","milliseconds","seconds","minutes","hours","days","Math","max","now","is_cancelled","formatAppointmentDate","dateString","date","day","String","getUTCDate","padStart","month","getUTCMonth","year","getUTCFullYear","getUTCHours","getUTCMinutes","record","contact_id","contact","find","console","log","appointment_address","agent_id","index","setContact","submitAppointment","updatedAppointment","response","error"],"sources":["src/components/EditAppointmentModal.vue"],"sourcesContent":["<template>\n    <div class=\"appointment-modal\">\n        <b-modal hide-backdrop :id=\"'appointment-modal-' + record.id\" hide-footer hide-header-close\n            header-class=\"d-block\" content-class=\"grey-background\">\n            <template #modal-header=\"{}\">\n                <div class=\"text-center\">\n                    <b-icon class=\"me-2\" icon=\"calendar-plus\" font-scale=\"1.1\"></b-icon>\n                    <b>Edit appointment</b>\n                </div>\n            </template>\n            <div class=\"search-contact-area\">\n                <ContactSearch :contacts=\"contacts\" @setContact=\"setContact\" :selectedContactInfo=\"selectedContact\"\n                    :formType=\"'edit'\" />\n            </div>\n            <div class=\"appointment-address-input-area mt-3\">\n                <b-form-input type=\"text\" v-model=\"appointmentAddress\" placeholder=\"Address\"></b-form-input>\n            </div>\n            <div class=\"status-select-box-area mt-3\">\n                <VueSelect multiple v-model=\"selectedAgent\" :options=\"agentList\" placeholder=\"Agent\" />\n            </div>\n            <div class=\"date-selector-area mt-3\">\n                <flat-pickr :model-value=\"appointmentDate\" :config=\"config\"\n                    @update:modelValue=\"appointmentDate = $event\" class=\"form-control\"></flat-pickr>\n            </div>\n            <div class=\"related-appointments-area mt-3\" v-if=\"relatedAppointments && relatedAppointments.length > 0\">\n                <b>Related Appointments</b>\n                <div class=\"mt-2\">\n                    <template v-for=\"(relatedAppointment, index) in relatedAppointments\">\n                        <div :key=\"index\" class=\"mb-2\">\n                            <div class=\"appointment-status-box bg-primary\">\n                                <b-row class=\"m-0\">\n                                    <b-col lg=\"6\" class=\"status-area text-center\">\n                                        <b-row>\n                                            <b-col :lg=\"recordRemainingText == '' ? '12' : 6\">\n                                                <span class=\"p-1\" :style=\"'color:' + recordStatusColor\">{{ recordStatus\n                                                    }}</span>\n                                            </b-col>\n                                            <b-col :lg=\"recordRemainingText == '' ? '12' : 6\">\n                                                <span>{{ recordRemainingText }}</span>\n                                            </b-col>\n                                        </b-row>\n                                    </b-col>\n                                    <b-col lg=\"6\" class=\"date-area text-center\">\n                                        <b-icon class=\"text-white\" font-scale=\"0.9\" icon=\"clock\"></b-icon>\n                                        <span class=\"text-white ms-1\" style=\"font-size: 14px;\">{{\n                                            formatAppointmentDate(relatedAppointment?.fields?.appointment_date) }}</span>\n                                    </b-col>\n                                </b-row>\n                            </div>\n                        </div>\n                    </template>\n                </div>\n            </div>\n            <div class=\"submit-button-area mt-3 text-end\">\n                <b-button variant=\"primary\" @click=\"submitAppointment\">Submit</b-button>\n            </div>\n        </b-modal>\n    </div>\n</template>\n\n<script>\nimport ContactSearch from './ContactSearch';\nimport VueSelect from 'vue-select';\nimport 'flatpickr/dist/flatpickr.css';\nimport FlatPickr from 'vue-flatpickr-component';\nimport { updateRecords } from '../services/appointmentsService';\n\nexport default {\n    props: [\"allRecords\", 'record', \"contacts\", \"agents\"],\n    components: {\n        ContactSearch,\n        VueSelect,\n        flatPickr: FlatPickr,\n    },\n    data() {\n        return {\n            selectedContact: null,\n            appointmentAddress: null,\n            selectedAgent: [],\n            appointmentDate: '',\n            selectedContactId: null,\n            config: {\n                enableTime: true,\n                time_24hr: true,\n            },\n            recordStatus: '',\n            recordStatusColor: '',\n            recordRemainingText: ''\n        };\n    },\n    mounted() {\n        this.initializeEditForm();\n    },\n    watch: {\n        contacts: 'initializeEditForm',\n        relatedAppointments: {\n            immediate: true,\n            handler(newValue, oldValue) {\n                if (newValue !== oldValue) {\n                    this.calculatePositiveHoursAndDays();\n                }\n            }\n        }\n    },\n    computed: {\n        agentList() {\n            return this.agents.map(agent => ({\n                id: agent.id,\n                label: `${agent.fields.agent_name} ${agent.fields.agent_surname}`,\n            }));\n        },\n        relatedAppointments() {\n            return this.allRecords.filter(appointment =>\n                this.selectedContact?.fields.appointments.includes(appointment.id)\n            );\n        }\n    },\n    methods: {\n        calculatePositiveHoursAndDays() {\n            for (let i = 0; i < this.relatedAppointments.length; i++) {\n\n                const start = new Date();\n                const end = new Date(this.relatedAppointments[i]?.fields?.appointment_date);\n                let difference = end - start;\n                const millisecondsPerSecond = 1000;\n                const secondsPerMinute = 60;\n                const minutesPerHour = 60;\n                const hoursPerDay = 24;\n\n                let milliseconds = difference % millisecondsPerSecond;\n                difference = (difference - milliseconds) / millisecondsPerSecond;\n                let seconds = difference % secondsPerMinute;\n                difference = (difference - seconds) / secondsPerMinute;\n                let minutes = difference % minutesPerHour;\n                difference = (difference - minutes) / minutesPerHour;\n                let hours = difference % hoursPerDay;\n                let days = (difference - hours) / hoursPerDay;\n\n                days = Math.max(0, days);\n                hours = Math.max(0, hours);\n\n                if (days > 0) {\n                    this.recordRemainingText = `${days} days`;\n                } else if (days <= 0 && hours > 0) {\n                    this.recordRemainingText = `${hours} hours`;\n                }\n\n                const now = new Date();\n                if (this.relatedAppointments[i]?.fields?.is_cancelled) {\n                    this.recordStatus = 'Cancelled';\n                    this.recordStatusColor = '#ff0000';\n                    this.recordRemainingText = ''\n                    return;\n                } else if (end > now) {\n                    this.recordStatus = 'Upcoming';\n                    this.recordStatusColor = '#ffa500';\n                    return;\n                } else {\n                    this.recordStatus = 'Completed';\n                    this.recordStatusColor = '#008000';\n                    this.recordRemainingText = ''\n                }\n\n            }\n        },\n        formatAppointmentDate(dateString) {\n            const date = new Date(dateString);\n            const day = String(date.getUTCDate()).padStart(2, '0');\n            const month = String(date.getUTCMonth() + 1).padStart(2, '0');\n            const year = date.getUTCFullYear();\n            const hours = String(date.getUTCHours()).padStart(2, '0');\n            const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n\n            return `${day}/${month}/${year} ${hours}:${minutes}`;\n        },\n        initializeEditForm() {\n            if (this.contacts && this.record.fields.contact_id) {\n                const contact = this.contacts.find(contact => contact.id === this.record.fields.contact_id[0]);\n                console.log(contact);\n                if (contact) {\n                    this.selectedContact = contact;\n                }\n            }\n            if (this.record.fields.appointment_address) {\n                this.appointmentAddress = this.record.fields.appointment_address;\n            }\n            if (this.record.fields.agent_id) {\n                this.selectedAgent = this.record.fields.agent_id.map((id, index) => ({\n                    id: id,\n                    label: `${this.record.fields.agent_name[index]} ${this.record.fields.agent_surname[index]}`,\n                }));\n            }\n            if (this.record.fields.appointment_date) {\n                this.appointmentDate = this.record.fields.appointment_date\n            }\n        },\n        setContact(contact) {\n            this.selectedContact = contact;\n        },\n\n        async submitAppointment() {\n            const updatedAppointment = {\n                id: this.record.id,\n                fields: {\n                    appointment_date: this.appointmentDate,\n                    appointment_address: this.appointmentAddress,\n                    contact_id: [this.selectedContact.id],\n                    agent_id: this.selectedAgent.map(agent => agent.id)\n                }\n            };\n\n            try {\n                const response = await updateRecords('Appointments', [updatedAppointment]);\n                console.log('Appointment updated:', response);\n            } catch (error) {\n                console.error('Error updating appointment:', error);\n            }\n        }\n    }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}