{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchRecords, addRecord } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nexport default {\n  components: {\n    AgentAvatar\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      currentPage: 1,\n      itemsPerPage: 10,\n      selectedAgents: [] // Seçilen ajanları tutacak dizi\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n  async created() {\n    this.fetchAppointments();\n    this.fetchAgents();\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      // Eğer daha önce seçilmemişse, diziye ekleyelim\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n        // Burada seçilen ajanla ilgili başka işlemler yapabilirsiniz\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n        // Seçimin kaldırılması durumunda yapılacak işlemler buraya gelebilir\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        console.log(this.records);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n        console.log(this.agents);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async addNewRecord() {\n      const tableName = 'tbl9reEf5STrkSA85';\n      const fields = {\n        Name: 'New Record'\n      };\n      try {\n        const newRecord = await addRecord(tableName, fields);\n        this.records.push(newRecord);\n      } catch (error) {\n        console.error('Error adding record:', error);\n      }\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchRecords","addRecord","fetchAgents","AgentAvatar","components","data","records","agents","currentPage","itemsPerPage","selectedAgents","computed","totalPages","Math","ceil","length","paginatedData","start","end","slice","created","fetchAppointments","methods","setSelectedAgent","agent","includes","push","setDeselectedAgent","index","indexOf","splice","tableName","console","log","error","addNewRecord","fields","Name","newRecord","formatDate","dateStr","date","Date","toLocaleDateString","toLocaleTimeString","prevPage","nextPage"],"sources":["src/components/AppointmentsList.vue"],"sourcesContent":["<script>\nimport { fetchRecords, addRecord } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\n\nexport default {\n  components: {\n    AgentAvatar\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      currentPage: 1,\n      itemsPerPage: 10,\n      selectedAgents: [], // Seçilen ajanları tutacak dizi\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.records.length / this.itemsPerPage);\n    },\n    paginatedData() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.records.slice(start, end);\n    }\n  },\n  async created() {\n    this.fetchAppointments();\n    this.fetchAgents();\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      // Eğer daha önce seçilmemişse, diziye ekleyelim\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n        // Burada seçilen ajanla ilgili başka işlemler yapabilirsiniz\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n        // Seçimin kaldırılması durumunda yapılacak işlemler buraya gelebilir\n      }\n    },\n    async fetchAppointments() {\n      const tableName = 'Appointments';\n      try {\n        this.records = await fetchRecords(tableName);\n        console.log(this.records);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async fetchAgents() {\n      const tableName = 'Agents';\n      try {\n        this.agents = await fetchAgents(tableName);\n        console.log(this.agents);\n\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    async addNewRecord() {\n      const tableName = 'tbl9reEf5STrkSA85';\n      const fields = { Name: 'New Record' };\n      try {\n        const newRecord = await addRecord(tableName, fields);\n        this.records.push(newRecord);\n      } catch (error) {\n        console.error('Error adding record:', error);\n      }\n    },\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return date.toLocaleDateString() + ' ' + date.toLocaleTimeString();\n    },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    }\n  }\n};\n</script>\n"],"mappings":";AACA,SAAAA,YAAA,EAAAC,SAAA;AACA,SAAAC,WAAA;AACA,OAAAC,WAAA;AAEA;EACAC,UAAA;IACAD;EACA;EACAE,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;MACAC,WAAA;MACAC,YAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,OAAAC,IAAA,CAAAC,IAAA,MAAAR,OAAA,CAAAS,MAAA,QAAAN,YAAA;IACA;IACAO,cAAA;MACA,MAAAC,KAAA,SAAAT,WAAA,aAAAC,YAAA;MACA,MAAAS,GAAA,GAAAD,KAAA,QAAAR,YAAA;MACA,YAAAH,OAAA,CAAAa,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;EACA;EACA,MAAAE,QAAA;IACA,KAAAC,iBAAA;IACA,KAAAnB,WAAA;EACA;EACAoB,OAAA;IACAC,iBAAAC,KAAA;MACA;MACA,UAAAd,cAAA,CAAAe,QAAA,CAAAD,KAAA;QACA,KAAAd,cAAA,CAAAgB,IAAA,CAAAF,KAAA;QACA;MACA;IACA;IACAG,mBAAAH,KAAA;MACA,MAAAI,KAAA,QAAAlB,cAAA,CAAAmB,OAAA,CAAAL,KAAA;MACA,IAAAI,KAAA;QACA,KAAAlB,cAAA,CAAAoB,MAAA,CAAAF,KAAA;QACA;MACA;IACA;IACA,MAAAP,kBAAA;MACA,MAAAU,SAAA;MACA;QACA,KAAAzB,OAAA,SAAAN,YAAA,CAAA+B,SAAA;QACAC,OAAA,CAAAC,GAAA,MAAA3B,OAAA;MAEA,SAAA4B,KAAA;QACAF,OAAA,CAAAE,KAAA,yBAAAA,KAAA;MACA;IACA;IACA,MAAAhC,YAAA;MACA,MAAA6B,SAAA;MACA;QACA,KAAAxB,MAAA,SAAAL,WAAA,CAAA6B,SAAA;QACAC,OAAA,CAAAC,GAAA,MAAA1B,MAAA;MAEA,SAAA2B,KAAA;QACAF,OAAA,CAAAE,KAAA,yBAAAA,KAAA;MACA;IACA;IACA,MAAAC,aAAA;MACA,MAAAJ,SAAA;MACA,MAAAK,MAAA;QAAAC,IAAA;MAAA;MACA;QACA,MAAAC,SAAA,SAAArC,SAAA,CAAA8B,SAAA,EAAAK,MAAA;QACA,KAAA9B,OAAA,CAAAoB,IAAA,CAAAY,SAAA;MACA,SAAAJ,KAAA;QACAF,OAAA,CAAAE,KAAA,yBAAAA,KAAA;MACA;IACA;IACAK,WAAAC,OAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,OAAA;MACA,OAAAC,IAAA,CAAAE,kBAAA,WAAAF,IAAA,CAAAG,kBAAA;IACA;IACAC,SAAA;MACA,SAAArC,WAAA;QACA,KAAAA,WAAA;MACA;IACA;IACAsC,SAAA;MACA,SAAAtC,WAAA,QAAAI,UAAA;QACA,KAAAJ,WAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}