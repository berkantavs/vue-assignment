{"ast":null,"code":"import { extend, ValidationObserver, ValidationProvider } from 'vee-validate';\nimport { required } from '@vee-validate/rules';\nimport ContactSearch from './ContactSearch';\nimport VueSelect from 'vue-select';\nimport 'flatpickr/dist/flatpickr.css';\nimport FlatPickr from 'vue-flatpickr-component';\nimport { createRecords } from '../services/appointmentsService';\n\n// Vee-validate rules\nextend('required', {\n  ...required,\n  message: 'This field is required'\n});\nexport default {\n  components: {\n    ContactSearch,\n    VueSelect,\n    flatPickr: FlatPickr,\n    ValidationObserver,\n    ValidationProvider\n  },\n  props: ['contacts', 'agents'],\n  data() {\n    return {\n      selectedContact: null,\n      appointmentAddress: null,\n      selectedAgent: null,\n      appointmentDate: '',\n      config: {\n        enableTime: true,\n        time_24hr: true,\n        dateFormat: 'Y-m-d H:i'\n      }\n    };\n  },\n  computed: {\n    agentList() {\n      return this.agents.map(agent => ({\n        id: agent.id,\n        label: `${agent.fields.agent_name} ${agent.fields.agent_surname}`\n      }));\n    }\n  },\n  methods: {\n    formatDateToISO(dateString) {\n      const date = new Date(dateString);\n      return date.toISOString();\n    },\n    async submitAppointment() {\n      try {\n        const formattedDate = this.formatDateToISO(this.appointmentDate);\n        const newRecords = [{\n          appointment_date: formattedDate,\n          appointment_address: this.appointmentAddress,\n          contact_id: [this.selectedContact.id],\n          agent_id: this.selectedAgent.map(agent => agent.id),\n          is_cancelled: false // Set default value for is_cancelled\n        }];\n        const response = await createRecords('Appointments', newRecords, true);\n        console.log('Records created:', response);\n        // Reset form or close modal after success\n        this.resetForm();\n        this.$bvModal.hide('new-appointment-modal');\n      } catch (error) {\n        console.error('Error creating appointment:', error);\n      }\n    },\n    resetForm() {\n      this.selectedContact = null;\n      this.appointmentAddress = null;\n      this.selectedAgent = null;\n      this.appointmentDate = '';\n    }\n  }\n};","map":{"version":3,"names":["extend","ValidationObserver","ValidationProvider","required","ContactSearch","VueSelect","FlatPickr","createRecords","message","components","flatPickr","props","data","selectedContact","appointmentAddress","selectedAgent","appointmentDate","config","enableTime","time_24hr","dateFormat","computed","agentList","agents","map","agent","id","label","fields","agent_name","agent_surname","methods","formatDateToISO","dateString","date","Date","toISOString","submitAppointment","formattedDate","newRecords","appointment_date","appointment_address","contact_id","agent_id","is_cancelled","response","console","log","resetForm","$bvModal","hide","error"],"sources":["src/components/NewAppointmentModal.vue"],"sourcesContent":["<template>\n    <div class=\"appointment-modal\">\n        <b-modal hide-backdrop id=\"new-appointment-modal\" hide-header-close header-class=\"d-block\"\n            content-class=\"grey-background\" static>\n            <template #modal-header=\"{}\">\n                <div class=\"text-center\">\n                    <b-icon class=\"me-2\" icon=\"calendar-plus\" font-scale=\"1.1\"></b-icon>\n                    <b>Create an Appointment</b>\n                </div>\n            </template>\n            <ValidationObserver v-slot=\"{ handleSubmit, invalid }\">\n                <form @submit.prevent=\"handleSubmit(submitAppointment)\">\n                    <div class=\"search-contact-area\">\n                        <ContactSearch :contacts=\"contacts\" @input=\"selectedContact = $event\" />\n                        <ErrorMessage name=\"selectedContact\" />\n                    </div>\n                    <div class=\"appointment-address-input-area mt-3\">\n                        <ValidationProvider name=\"appointmentAddress\" rules=\"required\" v-slot=\"{ errors }\">\n                            <b-form-input type=\"text\" v-model=\"appointmentAddress\" placeholder=\"Address\"></b-form-input>\n                            <span class=\"text-danger\">{{ errors[0] }}</span>\n                        </ValidationProvider>\n                    </div>\n                    <div class=\"status-select-box-area mt-3\">\n                        <ValidationProvider name=\"selectedAgent\" rules=\"required\" v-slot=\"{ errors }\">\n                            <VueSelect multiple v-model=\"selectedAgent\" :options=\"agentList\" placeholder=\"Agent\" />\n                            <span class=\"text-danger\">{{ errors[0] }}</span>\n                        </ValidationProvider>\n                    </div>\n                    <div class=\"date-selector-area mt-3\">\n                        <ValidationProvider name=\"appointmentDate\" rules=\"required\" v-slot=\"{ errors }\">\n                            <flat-pickr :model-value=\"appointmentDate\" :config=\"config\"\n                                @input=\"appointmentDate = $event\" class=\"form-control\"></flat-pickr>\n                            <span class=\"text-danger\">{{ errors[0] }}</span>\n                        </ValidationProvider>\n                    </div>\n                    <div class=\"submit-button-area mt-3 text-center\">\n                        <b-button variant=\"primary\" type=\"submit\" :disabled=\"invalid\">Submit</b-button>\n                    </div>\n                </form>\n            </ValidationObserver>\n        </b-modal>\n    </div>\n</template>\n\n<script>\nimport { extend, ValidationObserver, ValidationProvider } from 'vee-validate';\nimport { required } from '@vee-validate/rules';\nimport ContactSearch from './ContactSearch';\nimport VueSelect from 'vue-select';\nimport 'flatpickr/dist/flatpickr.css';\nimport FlatPickr from 'vue-flatpickr-component';\nimport { createRecords } from '../services/appointmentsService';\n\n// Vee-validate rules\nextend('required', {\n    ...required,\n    message: 'This field is required'\n});\n\nexport default {\n    components: {\n        ContactSearch,\n        VueSelect,\n        flatPickr: FlatPickr,\n        ValidationObserver,\n        ValidationProvider\n    },\n    props: ['contacts', 'agents'],\n    data() {\n        return {\n            selectedContact: null,\n            appointmentAddress: null,\n            selectedAgent: null,\n            appointmentDate: '',\n            config: {\n                enableTime: true,\n                time_24hr: true,\n                dateFormat: 'Y-m-d H:i'\n            }\n        };\n    },\n    computed: {\n        agentList() {\n            return this.agents.map(agent => ({\n                id: agent.id,\n                label: `${agent.fields.agent_name} ${agent.fields.agent_surname}`\n            }));\n        }\n    },\n    methods: {\n        formatDateToISO(dateString) {\n            const date = new Date(dateString);\n            return date.toISOString();\n        },\n        async submitAppointment() {\n            try {\n                const formattedDate = this.formatDateToISO(this.appointmentDate);\n                const newRecords = [\n                    {\n                        appointment_date: formattedDate,\n                        appointment_address: this.appointmentAddress,\n                        contact_id: [this.selectedContact.id],\n                        agent_id: this.selectedAgent.map(agent => agent.id),\n                        is_cancelled: false // Set default value for is_cancelled\n                    }\n                ];\n                const response = await createRecords('Appointments', newRecords, true);\n                console.log('Records created:', response);\n                // Reset form or close modal after success\n                this.resetForm();\n                this.$bvModal.hide('new-appointment-modal');\n            } catch (error) {\n                console.error('Error creating appointment:', error);\n            }\n        },\n        resetForm() {\n            this.selectedContact = null;\n            this.appointmentAddress = null;\n            this.selectedAgent = null;\n            this.appointmentDate = '';\n        }\n    }\n};\n</script>\n\n<style scoped>\n.grey-background {\n    background-color: #f8f9fa;\n}\n\n.text-danger {\n    color: #dc3545;\n}\n</style>"],"mappings":"AA6CA,SAAAA,MAAA,EAAAC,kBAAA,EAAAC,kBAAA;AACA,SAAAC,QAAA;AACA,OAAAC,aAAA;AACA,OAAAC,SAAA;AACA;AACA,OAAAC,SAAA;AACA,SAAAC,aAAA;;AAEA;AACAP,MAAA;EACA,GAAAG,QAAA;EACAK,OAAA;AACA;AAEA;EACAC,UAAA;IACAL,aAAA;IACAC,SAAA;IACAK,SAAA,EAAAJ,SAAA;IACAL,kBAAA;IACAC;EACA;EACAS,KAAA;EACAC,KAAA;IACA;MACAC,eAAA;MACAC,kBAAA;MACAC,aAAA;MACAC,eAAA;MACAC,MAAA;QACAC,UAAA;QACAC,SAAA;QACAC,UAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,UAAA;MACA,YAAAC,MAAA,CAAAC,GAAA,CAAAC,KAAA;QACAC,EAAA,EAAAD,KAAA,CAAAC,EAAA;QACAC,KAAA,KAAAF,KAAA,CAAAG,MAAA,CAAAC,UAAA,IAAAJ,KAAA,CAAAG,MAAA,CAAAE,aAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,gBAAAC,UAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,UAAA;MACA,OAAAC,IAAA,CAAAE,WAAA;IACA;IACA,MAAAC,kBAAA;MACA;QACA,MAAAC,aAAA,QAAAN,eAAA,MAAAhB,eAAA;QACA,MAAAuB,UAAA,IACA;UACAC,gBAAA,EAAAF,aAAA;UACAG,mBAAA,OAAA3B,kBAAA;UACA4B,UAAA,QAAA7B,eAAA,CAAAa,EAAA;UACAiB,QAAA,OAAA5B,aAAA,CAAAS,GAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAC,EAAA;UACAkB,YAAA;QACA,EACA;QACA,MAAAC,QAAA,SAAAtC,aAAA,iBAAAgC,UAAA;QACAO,OAAA,CAAAC,GAAA,qBAAAF,QAAA;QACA;QACA,KAAAG,SAAA;QACA,KAAAC,QAAA,CAAAC,IAAA;MACA,SAAAC,KAAA;QACAL,OAAA,CAAAK,KAAA,gCAAAA,KAAA;MACA;IACA;IACAH,UAAA;MACA,KAAAnC,eAAA;MACA,KAAAC,kBAAA;MACA,KAAAC,aAAA;MACA,KAAAC,eAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}