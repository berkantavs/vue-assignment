{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport AppointmentsListItem from \"./AppointmentsListItem.vue\";\nimport DatePick from 'vue-date-pick';\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick,\n    AppointmentsListItem\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      selectedAgents: [],\n      selectedStatus: null,\n      statuses: [{\n        value: null,\n        text: 'All Statutes'\n      }, {\n        value: 'cancelled',\n        text: 'Cancelled'\n      }, {\n        value: 'upcoming',\n        text: 'Upcoming'\n      }, {\n        value: 'completed',\n        text: 'Completed'\n      }],\n      filterStartDate: '',\n      filterEndDate: '',\n      searchText: '',\n      currentPage: 1,\n      itemsPerPage: 10\n    };\n  },\n  computed: {\n    totalPages() {\n      return Math.ceil(this.filteredAppointments.length / this.itemsPerPage);\n    },\n    paginatedRecords() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredAppointments.slice(start, end);\n    },\n    filteredAppointments() {\n      let filtered = this.records;\n\n      // Filter by status\n      if (this.selectedStatus && this.selectedStatus !== 'All Statutes') {\n        filtered = filtered.filter(record => record.status === this.selectedStatus);\n      }\n\n      // Filter by date range\n      if (this.filterStartDate && this.filterEndDate) {\n        const startDate = new Date(this.filterStartDate);\n        const endDate = new Date(this.filterEndDate);\n        filtered = filtered.filter(record => {\n          const appointmentDate = new Date(record.appointment_date);\n          return appointmentDate >= startDate && appointmentDate <= endDate;\n        });\n      }\n\n      // Filter by search text\n      if (this.searchText.trim() !== '') {\n        const searchText = this.searchText.trim().toLowerCase();\n        filtered = filtered.filter(record => {\n          return record.contact_name.toLowerCase().includes(searchText) || record.contact_surname.toLowerCase().includes(searchText) || record.appointment_address.toLowerCase().includes(searchText);\n        });\n      }\n      return filtered;\n    }\n  },\n  async created() {\n    await this.fetchData();\n  },\n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchData() {\n      try {\n        this.records = await fetchRecords('Appointments');\n        this.agents = await fetchAgents('Agents');\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    createAppointment() {\n      // Implement your create appointment logic here\n    },\n    search() {\n      this.currentPage = 1; // Reset pagination when searching\n    }\n  }\n};","map":{"version":3,"names":["fetchRecords","fetchAgents","AgentAvatar","AppointmentsListItem","DatePick","components","data","records","agents","selectedAgents","selectedStatus","statuses","value","text","filterStartDate","filterEndDate","searchText","currentPage","itemsPerPage","computed","totalPages","Math","ceil","filteredAppointments","length","paginatedRecords","start","end","slice","filtered","filter","record","status","startDate","Date","endDate","appointmentDate","appointment_date","trim","toLowerCase","contact_name","includes","contact_surname","appointment_address","created","fetchData","methods","setSelectedAgent","agent","push","setDeselectedAgent","index","indexOf","splice","error","console","createAppointment","search"],"sources":["src/components/AppointmentsList.vue"],"sourcesContent":["<template>\n  <div class=\"mt-5 mb-5\">\n    <b-container>\n      <div class=\"appointments-list\">\n        <div class=\"filter-area mb-3 mt-2\">\n          <b-row>\n            <b-col lg=\"2\">\n              <div class=\"avatar-container\">\n                <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                  <AgentAvatar :agent=\"agent\" @selectedAgent=\"setSelectedAgent\" @deselectedAgent=\"setDeselectedAgent\" />\n                </div>\n                <div v-if=\"agents.length > 5\" class=\"avatar-wrapper\">\n                  <b-avatar class=\"agent-avatar-item\" style=\"background-color: #ccc;\">\n                    +{{ agents.length - 5 }}\n                  </b-avatar>\n                </div>\n              </div>\n            </b-col>\n            <b-col lg=\"6\">\n              <b-row>\n                <b-col>\n                  <div class=\"status-select-box-area\">\n                    <b-form-select v-model=\"selectedStatus\" :options=\"statuses\"></b-form-select>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area\">\n                    <date-pick v-model=\"filterStartDate\" :pickTime=\"true\" :format=\"'DD-MM-YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n                <b-col>\n                  <div class=\"date-selector-area\">\n                    <date-pick v-model=\"filterEndDate\" :pickTime=\"true\" :format=\"'DD-MM-YYYY HH:mm'\"></date-pick>\n                  </div>\n                </b-col>\n              </b-row>\n            </b-col>\n            <b-col lg=\"4\">\n              <div class=\"d-flex justify-content-end search-input-area\">\n                <b-input-group class=\"w-75\">\n                  <b-form-input v-model=\"searchText\" type=\"text\" class=\"text-center\" placeholder=\"Search\"></b-form-input>\n                  <b-input-group-append>\n                    <b-button @click=\"search\" variant=\"dark\">\n                      <b-icon icon=\"search\" font-scale=\"0.9\"></b-icon>\n                    </b-button>\n                  </b-input-group-append>\n                </b-input-group>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        <div class=\"create-area pb-3\">\n          <b-row>\n            <b-col md=\"4\">\n              <b style=\"vertical-align:-webkit-baseline-middle\">{{ filteredAppointments.length }} Appointments found.</b>\n            </b-col>\n            <b-col md=\"4\" offset-md=\"4\">\n              <div class=\"create-btn-area text-end\">\n                <b-button variant=\"primary\" @click=\"createAppointment\">\n                  <b-icon icon=\"plus-circle\" font-scale=\"1.1\" class=\"mx-1\"></b-icon> Create Appointment\n                </b-button>\n              </div>\n            </b-col>\n          </b-row>\n        </div>\n        <div class=\"list-area mt-3 mb-3\" v-if=\"paginatedRecords && paginatedRecords.length > 0\">\n          <template v-for=\"(record, index) in paginatedRecords\">\n            <AppointmentsListItem :record=\"record\" :index=\"index\" :key=\"index\" />\n          </template>\n        </div>\n        <div class=\"text-center\" v-else>\n          No data found.\n        </div>\n        <b-pagination v-if=\"totalPages > 1\" v-model=\"currentPage\" :total-rows=\"filteredAppointments.length\" :per-page=\"itemsPerPage\"\n          aria-controls=\"appointments-list\" class=\"mt-3\"></b-pagination>\n      </div>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { fetchRecords } from '../services/appointmentsService';\nimport { fetchAgents } from '../services/agentsService';\nimport AgentAvatar from \"./AgentAvatar\";\nimport AppointmentsListItem from \"./AppointmentsListItem.vue\";\nimport DatePick from 'vue-date-pick';\n\nexport default {\n  components: {\n    AgentAvatar,\n    DatePick,\n    AppointmentsListItem\n  },\n  data() {\n    return {\n      records: [],\n      agents: [],\n      selectedAgents: [],\n      selectedStatus: null,\n      statuses: [\n        { value: null, text: 'All Statutes' },\n        { value: 'cancelled', text: 'Cancelled' },\n        { value: 'upcoming', text: 'Upcoming' },\n        { value: 'completed', text: 'Completed' },\n      ],\n      filterStartDate: '',\n      filterEndDate: '',\n      searchText: '',\n      currentPage: 1,\n      itemsPerPage: 10\n    };\n  },\n\n  computed: {\n    totalPages() {\n      return Math.ceil(this.filteredAppointments.length / this.itemsPerPage);\n    },\n    paginatedRecords() {\n      const start = (this.currentPage - 1) * this.itemsPerPage;\n      const end = start + this.itemsPerPage;\n      return this.filteredAppointments.slice(start, end);\n    },\n    filteredAppointments() {\n      let filtered = this.records;\n\n      // Filter by status\n      if (this.selectedStatus && this.selectedStatus !== 'All Statutes') {\n        filtered = filtered.filter(record => record.status === this.selectedStatus);\n      }\n\n      // Filter by date range\n      if (this.filterStartDate && this.filterEndDate) {\n        const startDate = new Date(this.filterStartDate);\n        const endDate = new Date(this.filterEndDate);\n        filtered = filtered.filter(record => {\n          const appointmentDate = new Date(record.appointment_date);\n          return appointmentDate >= startDate && appointmentDate <= endDate;\n        });\n      }\n\n      // Filter by search text\n      if (this.searchText.trim() !== '') {\n        const searchText = this.searchText.trim().toLowerCase();\n        filtered = filtered.filter(record => {\n          return record.contact_name.toLowerCase().includes(searchText) ||\n                 record.contact_surname.toLowerCase().includes(searchText) ||\n                 record.appointment_address.toLowerCase().includes(searchText);\n        });\n      }\n\n      return filtered;\n    }\n  },\n\n  async created() {\n    await this.fetchData();\n  },\n  \n  methods: {\n    setSelectedAgent(agent) {\n      if (!this.selectedAgents.includes(agent)) {\n        this.selectedAgents.push(agent);\n      }\n    },\n    setDeselectedAgent(agent) {\n      const index = this.selectedAgents.indexOf(agent);\n      if (index !== -1) {\n        this.selectedAgents.splice(index, 1);\n      }\n    },\n    async fetchData() {\n      try {\n        this.records = await fetchRecords('Appointments');\n        this.agents = await fetchAgents('Agents');\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    createAppointment() {\n      // Implement your create appointment logic here\n    },\n    search() {\n      this.currentPage = 1; // Reset pagination when searching\n    }\n  }\n};\n</script>\n"],"mappings":";AAiFA,SAAAA,YAAA;AACA,SAAAC,WAAA;AACA,OAAAC,WAAA;AACA,OAAAC,oBAAA;AACA,OAAAC,QAAA;AAEA;EACAC,UAAA;IACAH,WAAA;IACAE,QAAA;IACAD;EACA;EACAG,KAAA;IACA;MACAC,OAAA;MACAC,MAAA;MACAC,cAAA;MACAC,cAAA;MACAC,QAAA,GACA;QAAAC,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,KAAA;QAAAC,IAAA;MAAA,EACA;MACAC,eAAA;MACAC,aAAA;MACAC,UAAA;MACAC,WAAA;MACAC,YAAA;IACA;EACA;EAEAC,QAAA;IACAC,WAAA;MACA,OAAAC,IAAA,CAAAC,IAAA,MAAAC,oBAAA,CAAAC,MAAA,QAAAN,YAAA;IACA;IACAO,iBAAA;MACA,MAAAC,KAAA,SAAAT,WAAA,aAAAC,YAAA;MACA,MAAAS,GAAA,GAAAD,KAAA,QAAAR,YAAA;MACA,YAAAK,oBAAA,CAAAK,KAAA,CAAAF,KAAA,EAAAC,GAAA;IACA;IACAJ,qBAAA;MACA,IAAAM,QAAA,QAAAtB,OAAA;;MAEA;MACA,SAAAG,cAAA,SAAAA,cAAA;QACAmB,QAAA,GAAAA,QAAA,CAAAC,MAAA,CAAAC,MAAA,IAAAA,MAAA,CAAAC,MAAA,UAAAtB,cAAA;MACA;;MAEA;MACA,SAAAI,eAAA,SAAAC,aAAA;QACA,MAAAkB,SAAA,OAAAC,IAAA,MAAApB,eAAA;QACA,MAAAqB,OAAA,OAAAD,IAAA,MAAAnB,aAAA;QACAc,QAAA,GAAAA,QAAA,CAAAC,MAAA,CAAAC,MAAA;UACA,MAAAK,eAAA,OAAAF,IAAA,CAAAH,MAAA,CAAAM,gBAAA;UACA,OAAAD,eAAA,IAAAH,SAAA,IAAAG,eAAA,IAAAD,OAAA;QACA;MACA;;MAEA;MACA,SAAAnB,UAAA,CAAAsB,IAAA;QACA,MAAAtB,UAAA,QAAAA,UAAA,CAAAsB,IAAA,GAAAC,WAAA;QACAV,QAAA,GAAAA,QAAA,CAAAC,MAAA,CAAAC,MAAA;UACA,OAAAA,MAAA,CAAAS,YAAA,CAAAD,WAAA,GAAAE,QAAA,CAAAzB,UAAA,KACAe,MAAA,CAAAW,eAAA,CAAAH,WAAA,GAAAE,QAAA,CAAAzB,UAAA,KACAe,MAAA,CAAAY,mBAAA,CAAAJ,WAAA,GAAAE,QAAA,CAAAzB,UAAA;QACA;MACA;MAEA,OAAAa,QAAA;IACA;EACA;EAEA,MAAAe,QAAA;IACA,WAAAC,SAAA;EACA;EAEAC,OAAA;IACAC,iBAAAC,KAAA;MACA,UAAAvC,cAAA,CAAAgC,QAAA,CAAAO,KAAA;QACA,KAAAvC,cAAA,CAAAwC,IAAA,CAAAD,KAAA;MACA;IACA;IACAE,mBAAAF,KAAA;MACA,MAAAG,KAAA,QAAA1C,cAAA,CAAA2C,OAAA,CAAAJ,KAAA;MACA,IAAAG,KAAA;QACA,KAAA1C,cAAA,CAAA4C,MAAA,CAAAF,KAAA;MACA;IACA;IACA,MAAAN,UAAA;MACA;QACA,KAAAtC,OAAA,SAAAP,YAAA;QACA,KAAAQ,MAAA,SAAAP,WAAA;MACA,SAAAqD,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;MACA;IACA;IACAE,kBAAA;MACA;IAAA,CACA;IACAC,OAAA;MACA,KAAAxC,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}