{"ast":null,"code":"// import AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n  // components: {\n  //     AgentAvatar\n  // },\n  props: ['record', \"index\"],\n  data() {\n    return {\n      record_status: null,\n      record_status_color: null,\n      record_remaining_text: null\n    };\n  },\n  created() {\n    this.getAppointmentStatus();\n  },\n  methods: {\n    getAppointmentStatus() {\n      const currentDate = new Date();\n      const appointmentDate = new Date(this.record.fields.appointment_date);\n      if (this.record.fields.is_cancelled) {\n        this.record_status = \"İptal Edildi\";\n        this.record_status_color = '#ff0000';\n        this.record_remaining_text = ''; // İptal edilen randevular için kalan süre temizlenir\n      } else if (appointmentDate > currentDate) {\n        this.record_status = \"Yaklaşan\";\n        this.record_status_color = '#FFA500';\n        const timeRemaining = appointmentDate.getTime() - currentDate.getTime();\n        const hoursRemaining = Math.floor(timeRemaining / (1000 * 60 * 60));\n        const daysRemaining = Math.floor(hoursRemaining / 24);\n        if (daysRemaining >= 1) {\n          this.record_remaining_text = `${daysRemaining} gün`;\n        } else {\n          this.record_remaining_text = `${hoursRemaining} saat`;\n        }\n      } else {\n        this.record_status = \"Tamamlandı\";\n        this.record_status_color = '#00FF00';\n        this.record_remaining_text = ''; // Geçmiş randevular için kalan süre temizlenir\n      }\n    },\n    calculateDaysDifference(dateString) {\n      // Verilen tarihi Date nesnesine dönüştür\n      const givenDate = new Date(dateString);\n\n      // Şu anki tarihi al\n      const currentDate = new Date();\n\n      // Zaman dilimini hesapla\n      const timeDifference = currentDate.getTime() - givenDate.getTime();\n\n      // Milisaniyeyi gün cinsine çevir\n      const daysDifference = Math.floor(timeDifference / (1000 * 3600 * 24));\n\n      // Yıl farkını hesapla\n      const yearDifference = currentDate.getFullYear() - givenDate.getFullYear();\n\n      // Ay farkını hesapla\n      const monthDifference = yearDifference * 12 + (currentDate.getMonth() - givenDate.getMonth());\n\n      // Saat farkını hesapla\n      const hourDifference = Math.floor(timeDifference / (1000 * 3600) % 24);\n\n      // Sonucu string olarak formatla\n      const result = `${daysDifference} gün, ${monthDifference} ay, ${yearDifference} yıl, ${hourDifference} saat`;\n      return result;\n    },\n    formatAppointmentDate(dateString) {\n      const date = new Date(dateString);\n      const day = String(date.getUTCDate()).padStart(2, '0');\n      const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // getUTCMonth() 0-11 arası değer döner, bu yüzden +1 eklenir\n      const year = date.getUTCFullYear();\n      const hours = String(date.getUTCHours()).padStart(2, '0');\n      const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n      return `${day}/${month}/${year} ${hours}:${minutes}`;\n    }\n  }\n};","map":{"version":3,"names":["props","data","record_status","record_status_color","record_remaining_text","created","getAppointmentStatus","methods","currentDate","Date","appointmentDate","record","fields","appointment_date","is_cancelled","timeRemaining","getTime","hoursRemaining","Math","floor","daysRemaining","calculateDaysDifference","dateString","givenDate","timeDifference","daysDifference","yearDifference","getFullYear","monthDifference","getMonth","hourDifference","result","formatAppointmentDate","date","day","String","getUTCDate","padStart","month","getUTCMonth","year","getUTCFullYear","hours","getUTCHours","minutes","getUTCMinutes"],"sources":["src/components/AppointmentsListItem.vue"],"sourcesContent":["<template>\n    <div :class=\"['appointment-item', { 'grey-background': index % 2 === 0, 'white-background': index % 2 !== 0 }]\">\n        <b-row>\n            <b-col lg=\"3\">\n                <div class=\"contact-name mb-2\">\n                    <b-icon icon=\"person\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    <b> {{ record.fields.contact_name[0] + ' ' + record.fields.contact_surname[0] }}</b>\n                </div>\n\n                <div class=\"contact-mail mb-2\">\n                    <b-icon icon=\"mailbox\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_email[0] }}\n                </div>\n\n                <div class=\"contact-phone mb-2\">\n                    <b-icon icon=\"phone\" font-scale=\"1.1\" class=\"me-2\"></b-icon>\n                    {{ record.fields.contact_phone[0] }}\n                </div>\n\n            </b-col>\n            <b-col lg=\"2\" class=\"appointment_address_container\">\n                <div class=\"appointment-address mb-2\">\n                    <b-icon icon=\"house-door\" font-scale=\"1.5\" class=\"me-2\"></b-icon>\n                    <b style=\"font-size: 15px;\">\n                        {{ record.fields.appointment_address }}</b>\n                </div>\n            </b-col>\n            <b-col lg=\"4\" class=\"appointment_address_container\">\n                <div class=\"appointment-status-box bg-primary\">\n                    <b-row class=\"m-0\">\n                        <b-col lg=\"6\" class=\"status-area text-center\">\n                            <span :style=\"'color:' + record_status_color\">\n                                {{ record_status }} </span>\n                            <span>{{ record_remaining_text }}</span>\n                        </b-col>\n                        <b-col lg=\"6\" class=\"date-area text-center\">\n                            <b-icon class=\"text-white\" font-scale=\"0.9\" icon=\"clock\"></b-icon>\n                            <span class=\"text-white ms-1\" style=\"font-size: 14px;\"> {{\n                                formatAppointmentDate(record.fields.appointment_date) }}</span>\n                        </b-col>\n                    </b-row>\n                </div>\n            </b-col>\n            <b-col lg=\"3\">\n                {{ calculateDaysDifference(record.fields.appointment_date) }}\n                <!-- <div v-for=\"(agent, index) in agents.slice(0, 5)\" :key=\"index\" class=\"avatar-wrapper\">\n                    <AgentAvatar :agent=\"agent\" />\n                </div> -->\n            </b-col>\n        </b-row>\n    </div>\n</template>\n\n<script>\n// import AgentAvatar from './AgentAvatar.vue';\n\nexport default {\n    // components: {\n    //     AgentAvatar\n    // },\n    props: ['record', \"index\"],\n    data() {\n        return {\n            record_status: null,\n            record_status_color: null,\n            record_remaining_text: null,\n        }\n    },\n    created() {\n        this.getAppointmentStatus()\n    },\n    methods: {\n        getAppointmentStatus() {\n            const currentDate = new Date();\n            const appointmentDate = new Date(this.record.fields.appointment_date);\n\n            if (this.record.fields.is_cancelled) {\n                this.record_status = \"İptal Edildi\";\n                this.record_status_color = '#ff0000';\n                this.record_remaining_text = ''; // İptal edilen randevular için kalan süre temizlenir\n            } else if (appointmentDate > currentDate) {\n                this.record_status = \"Yaklaşan\";\n                this.record_status_color = '#FFA500';\n\n                const timeRemaining = appointmentDate.getTime() - currentDate.getTime();\n                const hoursRemaining = Math.floor(timeRemaining / (1000 * 60 * 60));\n                const daysRemaining = Math.floor(hoursRemaining / 24);\n\n                if (daysRemaining >= 1) {\n                    this.record_remaining_text = `${daysRemaining} gün`;\n                } else {\n                    this.record_remaining_text = `${hoursRemaining} saat`;\n                }\n            } else {\n                this.record_status = \"Tamamlandı\";\n                this.record_status_color = '#00FF00';\n                this.record_remaining_text = ''; // Geçmiş randevular için kalan süre temizlenir\n            }\n        },\n        calculateDaysDifference(dateString) {\n            // Verilen tarihi Date nesnesine dönüştür\n            const givenDate = new Date(dateString);\n\n            // Şu anki tarihi al\n            const currentDate = new Date();\n\n            // Zaman dilimini hesapla\n            const timeDifference = currentDate.getTime() - givenDate.getTime();\n\n            // Milisaniyeyi gün cinsine çevir\n            const daysDifference = Math.floor(timeDifference / (1000 * 3600 * 24));\n\n            // Yıl farkını hesapla\n            const yearDifference = currentDate.getFullYear() - givenDate.getFullYear();\n\n            // Ay farkını hesapla\n            const monthDifference = (yearDifference * 12) + (currentDate.getMonth() - givenDate.getMonth());\n\n            // Saat farkını hesapla\n            const hourDifference = Math.floor(timeDifference / (1000 * 3600) % 24);\n\n            // Sonucu string olarak formatla\n            const result = `${daysDifference} gün, ${monthDifference} ay, ${yearDifference} yıl, ${hourDifference} saat`;\n\n            return result;\n        },\n        formatAppointmentDate(dateString) {\n            const date = new Date(dateString);\n            const day = String(date.getUTCDate()).padStart(2, '0');\n            const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // getUTCMonth() 0-11 arası değer döner, bu yüzden +1 eklenir\n            const year = date.getUTCFullYear();\n            const hours = String(date.getUTCHours()).padStart(2, '0');\n            const minutes = String(date.getUTCMinutes()).padStart(2, '0');\n\n            return `${day}/${month}/${year} ${hours}:${minutes}`;\n        }\n\n    }\n};\n</script>\n"],"mappings":"AAsDA;;AAEA;EACA;EACA;EACA;EACAA,KAAA;EACAC,KAAA;IACA;MACAC,aAAA;MACAC,mBAAA;MACAC,qBAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,oBAAA;EACA;EACAC,OAAA;IACAD,qBAAA;MACA,MAAAE,WAAA,OAAAC,IAAA;MACA,MAAAC,eAAA,OAAAD,IAAA,MAAAE,MAAA,CAAAC,MAAA,CAAAC,gBAAA;MAEA,SAAAF,MAAA,CAAAC,MAAA,CAAAE,YAAA;QACA,KAAAZ,aAAA;QACA,KAAAC,mBAAA;QACA,KAAAC,qBAAA;MACA,WAAAM,eAAA,GAAAF,WAAA;QACA,KAAAN,aAAA;QACA,KAAAC,mBAAA;QAEA,MAAAY,aAAA,GAAAL,eAAA,CAAAM,OAAA,KAAAR,WAAA,CAAAQ,OAAA;QACA,MAAAC,cAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAJ,aAAA;QACA,MAAAK,aAAA,GAAAF,IAAA,CAAAC,KAAA,CAAAF,cAAA;QAEA,IAAAG,aAAA;UACA,KAAAhB,qBAAA,MAAAgB,aAAA;QACA;UACA,KAAAhB,qBAAA,MAAAa,cAAA;QACA;MACA;QACA,KAAAf,aAAA;QACA,KAAAC,mBAAA;QACA,KAAAC,qBAAA;MACA;IACA;IACAiB,wBAAAC,UAAA;MACA;MACA,MAAAC,SAAA,OAAAd,IAAA,CAAAa,UAAA;;MAEA;MACA,MAAAd,WAAA,OAAAC,IAAA;;MAEA;MACA,MAAAe,cAAA,GAAAhB,WAAA,CAAAQ,OAAA,KAAAO,SAAA,CAAAP,OAAA;;MAEA;MACA,MAAAS,cAAA,GAAAP,IAAA,CAAAC,KAAA,CAAAK,cAAA;;MAEA;MACA,MAAAE,cAAA,GAAAlB,WAAA,CAAAmB,WAAA,KAAAJ,SAAA,CAAAI,WAAA;;MAEA;MACA,MAAAC,eAAA,GAAAF,cAAA,SAAAlB,WAAA,CAAAqB,QAAA,KAAAN,SAAA,CAAAM,QAAA;;MAEA;MACA,MAAAC,cAAA,GAAAZ,IAAA,CAAAC,KAAA,CAAAK,cAAA;;MAEA;MACA,MAAAO,MAAA,MAAAN,cAAA,SAAAG,eAAA,QAAAF,cAAA,SAAAI,cAAA;MAEA,OAAAC,MAAA;IACA;IACAC,sBAAAV,UAAA;MACA,MAAAW,IAAA,OAAAxB,IAAA,CAAAa,UAAA;MACA,MAAAY,GAAA,GAAAC,MAAA,CAAAF,IAAA,CAAAG,UAAA,IAAAC,QAAA;MACA,MAAAC,KAAA,GAAAH,MAAA,CAAAF,IAAA,CAAAM,WAAA,QAAAF,QAAA;MACA,MAAAG,IAAA,GAAAP,IAAA,CAAAQ,cAAA;MACA,MAAAC,KAAA,GAAAP,MAAA,CAAAF,IAAA,CAAAU,WAAA,IAAAN,QAAA;MACA,MAAAO,OAAA,GAAAT,MAAA,CAAAF,IAAA,CAAAY,aAAA,IAAAR,QAAA;MAEA,UAAAH,GAAA,IAAAI,KAAA,IAAAE,IAAA,IAAAE,KAAA,IAAAE,OAAA;IACA;EAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}